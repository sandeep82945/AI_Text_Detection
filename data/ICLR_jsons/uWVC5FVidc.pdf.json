{
    "abstractText": "The recent advancements in large language models (LLMs) have sparked a growing apprehension regarding the potential misuse. One approach to mitigating this risk is to incorporate watermarking techniques into LLMs, allowing for the tracking and attribution of model outputs. This study examines a crucial aspect of watermarking: how significantly watermarks impact the quality of model-generated outputs. Previous studies have suggested a trade-off between watermark strength and output quality. However, our research demonstrates that it is possible to integrate watermarks without affecting the output probability distribution with appropriate implementation. We refer to this type of watermark as an unbiased watermark. This has significant implications for the use of LLMs, as it becomes impossible for users to discern whether a service provider has incorporated watermarks or not. Furthermore, the presence of watermarks does not compromise the performance of the model in downstream tasks, ensuring that the overall utility of the language model is preserved. Our findings contribute to the ongoing discussion around responsible AI development, suggesting that unbiased watermarks can serve as an effective means of tracking and attributing model outputs without sacrificing output quality.",
    "authors": [
        {
            "affiliations": [],
            "name": "UNBIASED WATERMARK"
        }
    ],
    "id": "SP:8dce5276cebae399f960761dfaf00445bec0113f",
    "references": [
        {
            "authors": [
                "Scott Aaronson"
            ],
            "title": "My ai safety lecture for ut effective altruism",
            "venue": "URL https: //scottaaronson.blog/?p=6823",
            "year": 2022
        },
        {
            "authors": [
                "Sahar Abdelnabi",
                "Mario Fritz"
            ],
            "title": "Adversarial watermarking transformer: Towards tracing text provenance with data hiding",
            "venue": "IEEE Symposium on Security and Privacy (SP),",
            "year": 2021
        },
        {
            "authors": [
                "Yossi Adi",
                "Carsten Baum",
                "Moustapha Cisse",
                "Benny Pinkas",
                "Joseph Keshet"
            ],
            "title": "Turning your weakness into a strength: Watermarking deep neural networks by backdooring",
            "venue": "In 27th USENIX Security Symposium,",
            "year": 2018
        },
        {
            "authors": [
                "Mikhail J Atallah",
                "Victor Raskin",
                "Michael Crogan",
                "Christian Hempelmann",
                "Florian Kerschbaum",
                "Dina Mohamed",
                "Sanket Naik"
            ],
            "title": "Natural language watermarking: Design, analysis, and a proof-of-concept implementation",
            "venue": "In Information Hiding: 4th International Workshop,",
            "year": 2001
        },
        {
            "authors": [
                "Franziska Boenisch"
            ],
            "title": "A systematic review on model watermarking for neural networks",
            "venue": "Frontiers in big Data,",
            "year": 2021
        },
        {
            "authors": [
                "Ond\u0159ej Bojar",
                "Rajen Chatterjee",
                "Christian Federmann",
                "Yvette Graham",
                "Barry Haddow",
                "Shujian Huang",
                "Matthias Huck",
                "Philipp Koehn",
                "Qun Liu",
                "Varvara Logacheva",
                "Christof Monz",
                "Matteo Negri",
                "Matt Post",
                "Raphael Rubino",
                "Lucia Specia",
                "Marco Turchi"
            ],
            "title": "Findings of the 2017 conference on machine translation (WMT17)",
            "venue": "In Proceedings of the Second Conference on Machine Translation,",
            "year": 2017
        },
        {
            "authors": [
                "Nicholas Boucher",
                "Ilia Shumailov",
                "Ross Anderson",
                "Nicolas Papernot"
            ],
            "title": "Bad characters: Imperceptible nlp attacks",
            "venue": "IEEE Symposium on Security and Privacy (SP),",
            "year": 2022
        },
        {
            "authors": [
                "Yuei-Lin Chiang",
                "Lu-Ping Chang",
                "Wen-Tai Hsieh",
                "Wen-Chih Chen"
            ],
            "title": "Natural language watermarking using semantic substitution for chinese text",
            "venue": "In Digital Watermarking: Second International Workshop,",
            "year": 2003
        },
        {
            "authors": [
                "Miranda Christ",
                "Sam Gunn",
                "Or Zamir"
            ],
            "title": "Undetectable watermarks for language models",
            "venue": "arXiv preprint arXiv:2306.09194,",
            "year": 2023
        },
        {
            "authors": [
                "Hyung Won Chung",
                "Le Hou",
                "Shayne Longpre",
                "Barret Zoph",
                "Yi Tay",
                "William Fedus",
                "Eric Li",
                "Xuezhi Wang",
                "Mostafa Dehghani",
                "Siddhartha Brahma"
            ],
            "title": "Scaling instruction-finetuned language models",
            "venue": "arXiv preprint arXiv:2210.11416,",
            "year": 2022
        },
        {
            "authors": [
                "Ingemar Cox",
                "Matthew Miller",
                "Jeffrey Bloom",
                "Jessica Fridrich",
                "Ton Kalker"
            ],
            "title": "Digital watermarking and steganography",
            "venue": "Morgan kaufmann,",
            "year": 2007
        },
        {
            "authors": [
                "Evan Crothers",
                "Nathalie Japkowicz",
                "Herna Viktor"
            ],
            "title": "Machine generated text: A comprehensive survey of threat models and detection methods",
            "venue": "arXiv preprint arXiv:2210.07321,",
            "year": 2022
        },
        {
            "authors": [
                "Falcon Z Dai",
                "Zheng Cai"
            ],
            "title": "Towards near-imperceptible steganographic text",
            "venue": "arXiv preprint arXiv:1907.06679,",
            "year": 2019
        },
        {
            "authors": [
                "Luc Devroye"
            ],
            "title": "Non-Uniform Random Variate Generation",
            "year": 1986
        },
        {
            "authors": [
                "Tina Fang",
                "Martin Jaggi",
                "Katerina Argyraki"
            ],
            "title": "Generating steganographic text with lstms",
            "venue": "arXiv preprint arXiv:1705.10742,",
            "year": 2017
        },
        {
            "authors": [
                "Jinlan Fu",
                "See-Kiong Ng",
                "Zhengbao Jiang",
                "Pengfei Liu"
            ],
            "title": "Gptscore: Evaluate as you desire",
            "venue": "arXiv preprint arXiv:2302.04166,",
            "year": 2023
        },
        {
            "authors": [
                "Evgeniy Gabrilovich",
                "Alex Gontmakher"
            ],
            "title": "The homograph attack",
            "venue": "Communications of the ACM,",
            "year": 2002
        },
        {
            "authors": [
                "Margherita Gambini",
                "Tiziano Fagni",
                "Fabrizio Falchi",
                "Maurizio Tesconi"
            ],
            "title": "On pushing deepfake tweet detection capabilities to the limits",
            "venue": "In 14th ACM Web Science Conference",
            "year": 2022
        },
        {
            "authors": [
                "Riley Goodside"
            ],
            "title": "There are adversarial attacks for that proposal as well \u2014 in particular, generating with emojis after words and then removing them before submitting defeats it.",
            "venue": "URL https://twitter.com/goodside/status/1610682909647671306",
            "year": 2023
        },
        {
            "authors": [
                "Chenxi Gu",
                "Chengsong Huang",
                "Xiaoqing Zheng",
                "Kai-Wei Chang",
                "Cho-Jui Hsieh"
            ],
            "title": "Watermarking pre-trained language models with backdooring",
            "venue": "arXiv preprint arXiv:2210.07543,",
            "year": 2022
        },
        {
            "authors": [
                "Tianyu Gu",
                "Brendan Dolan-Gavitt",
                "Siddharth Garg"
            ],
            "title": "Badnets: Identifying vulnerabilities in the machine learning model supply chain",
            "venue": "arXiv preprint arXiv:1708.06733,",
            "year": 2017
        },
        {
            "authors": [
                "Xuanli He",
                "Qiongkai Xu",
                "Lingjuan Lyu",
                "Fangzhao Wu",
                "Chenguang Wang"
            ],
            "title": "Protecting intellectual property of language generation apis with lexical watermark",
            "venue": "In Proceedings of the AAAI Conference on Artificial Intelligence,",
            "year": 2022
        },
        {
            "authors": [
                "Xuanli He",
                "Qiongkai Xu",
                "Yi Zeng",
                "Lingjuan Lyu",
                "Fangzhao Wu",
                "Jiwei Li",
                "Ruoxi Jia"
            ],
            "title": "Cater: Intellectual property protection on text generation apis via conditional watermarks",
            "venue": "arXiv preprint arXiv:2209.08773,",
            "year": 2022
        },
        {
            "authors": [
                "James N Helfrich",
                "Rick Neff"
            ],
            "title": "Dual canonicalization: An answer to the homograph attack",
            "venue": "In 2012 eCrime Researchers Summit,",
            "year": 2012
        },
        {
            "authors": [
                "Karl Moritz Hermann",
                "Tom\u00e1s Kocisk\u00fd",
                "Edward Grefenstette",
                "Lasse Espeholt",
                "Will Kay",
                "Mustafa Suleyman",
                "Phil Blunsom"
            ],
            "title": "Teaching machines to read and comprehend",
            "venue": "Advances in Neural Information Processing Systems 28: Annual Conference on Neural Information Processing Systems",
            "year": 2015
        },
        {
            "authors": [
                "Daphne Ippolito",
                "Daniel Duckworth",
                "Chris Callison-Burch",
                "Douglas Eck"
            ],
            "title": "Automatic detection of generated text is easiest when humans are fooled",
            "year": 1911
        },
        {
            "authors": [
                "Srinivasan Iyer",
                "Xi Victoria Lin",
                "Ramakanth Pasunuru",
                "Todor Mihaylov",
                "D\u00e1niel Simig",
                "Ping Yu",
                "Kurt Shuster",
                "Tianlu Wang",
                "Qing Liu",
                "Punit Singh Koura"
            ],
            "title": "Opt-iml: Scaling language model instruction meta learning through the lens of generalization",
            "venue": "arXiv preprint arXiv:2212.12017,",
            "year": 2022
        },
        {
            "authors": [
                "Zunera Jalil",
                "Anwar M Mirza"
            ],
            "title": "A review of digital watermarking techniques for text documents",
            "venue": "In 2009 International Conference on Information and Multimedia Technology,",
            "year": 2009
        },
        {
            "authors": [
                "Ganesh Jawahar",
                "Muhammad Abdul-Mageed",
                "Laks VS Lakshmanan"
            ],
            "title": "Automatic detection of machine generated text: A critical survey",
            "venue": "arXiv preprint arXiv:2011.01314,",
            "year": 2020
        },
        {
            "authors": [
                "Hengrui Jia",
                "Christopher A Choquette-Choo",
                "Varun Chandrasekaran",
                "Nicolas Papernot"
            ],
            "title": "Entangled watermarks as a defense against model extraction",
            "venue": "In USENIX Security Symposium,",
            "year": 2021
        },
        {
            "authors": [
                "Nurul Shamimi Kamaruddin",
                "Amirrudin Kamsin",
                "Lip Yee Por",
                "Hameedur Rahman"
            ],
            "title": "A review of text watermarking: theory, methods, and applications",
            "venue": "IEEE Access,",
            "year": 2018
        },
        {
            "authors": [
                "John Kirchenbauer",
                "Jonas Geiping",
                "Yuxin Wen",
                "Jonathan Katz",
                "Ian Miers",
                "Tom Goldstein"
            ],
            "title": "A watermark for large language models",
            "venue": "arXiv preprint arXiv:2301.10226,",
            "year": 2023
        },
        {
            "authors": [
                "Kalpesh Krishna",
                "Yixiao Song",
                "Marzena Karpinska",
                "John Wieting",
                "Mohit Iyyer"
            ],
            "title": "Paraphrasing evades detectors of ai-generated text, but retrieval is an effective defense",
            "venue": "arXiv preprint arXiv:2303.13408,",
            "year": 2023
        },
        {
            "authors": [
                "Rohith Kuditipudi",
                "John Thickstun",
                "Tatsunori Hashimoto",
                "Percy Liang"
            ],
            "title": "Robust distortion-free watermarks for language models",
            "venue": "arXiv preprint arXiv:2307.15593,",
            "year": 2023
        },
        {
            "authors": [
                "Zheng Li",
                "Chengyu Hu",
                "Yang Zhang",
                "Shanqing Guo"
            ],
            "title": "How to prove your model belongs to you: A blind-watermark based framework to protect intellectual property of dnn",
            "venue": "In Proceedings of the 35th Annual Computer Security Applications Conference,",
            "year": 2019
        },
        {
            "authors": [
                "Chin-Yew Lin"
            ],
            "title": "Rouge: A package for automatic evaluation of summaries",
            "venue": "In Text summarization branches out,",
            "year": 2004
        },
        {
            "authors": [
                "Yang Liu",
                "Mirella Lapata"
            ],
            "title": "Text summarization with pretrained encoders",
            "venue": "In Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing (EMNLP-IJCNLP),",
            "year": 2019
        },
        {
            "authors": [
                "Yinhan Liu",
                "Jiatao Gu",
                "Naman Goyal",
                "Xian Li",
                "Sergey Edunov",
                "Marjan Ghazvininejad",
                "Mike Lewis",
                "Luke Zettlemoyer"
            ],
            "title": "Multilingual denoising pre-training for neural machine translation",
            "venue": "Transactions of the Association for Computational Linguistics,",
            "year": 2020
        },
        {
            "authors": [
                "Hasan Mesut Meral",
                "B\u00fclent Sankur",
                "A Sumru \u00d6zsoy",
                "Tunga G\u00fcng\u00f6r",
                "Emre Sevin\u00e7"
            ],
            "title": "Natural language watermarking via morphosyntactic alterations",
            "venue": "Computer Speech & Language,",
            "year": 2009
        },
        {
            "authors": [
                "Luca Pajola",
                "Mauro Conti"
            ],
            "title": "Fall of giants: How popular text-based mlaas fall against a simple evasion attack",
            "venue": "IEEE European Symposium on Security and Privacy (EuroS&P),",
            "year": 2021
        },
        {
            "authors": [
                "Kishore Papineni",
                "Salim Roukos",
                "Todd Ward",
                "Wei-Jing Zhu"
            ],
            "title": "Bleu: a method for automatic evaluation of machine translation",
            "venue": "In Proceedings of the 40th annual meeting of the Association for Computational Linguistics,",
            "year": 2002
        },
        {
            "authors": [
                "Fabien AP Petitcolas",
                "Ross J Anderson",
                "Markus G Kuhn"
            ],
            "title": "Information hiding-a survey",
            "venue": "Proceedings of the IEEE,",
            "year": 1999
        },
        {
            "authors": [
                "Christine I Podilchuk",
                "Edward J Delp"
            ],
            "title": "Digital watermarking: algorithms and applications",
            "venue": "IEEE signal processing Magazine,",
            "year": 2001
        },
        {
            "authors": [
                "Vidyasagar M Potdar",
                "Song Han",
                "Elizabeth Chang"
            ],
            "title": "A survey of digital image watermarking techniques",
            "venue": "In INDIN\u201905. 2005 3rd IEEE International Conference on Industrial Informatics,",
            "year": 2005
        },
        {
            "authors": [
                "Stefano Giovanni Rizzo",
                "Flavio Bertini",
                "Danilo Montesi"
            ],
            "title": "Fine-grain watermarking for intellectual property protection",
            "venue": "EURASIP Journal on Information Security,",
            "year": 2019
        },
        {
            "authors": [
                "Vinu Sankar Sadasivan",
                "Aounon Kumar",
                "Sriram Balasubramanian",
                "Wenxiao Wang",
                "Soheil Feizi"
            ],
            "title": "Can ai-generated text be reliably detected",
            "venue": "arXiv preprint arXiv:2303.11156,",
            "year": 2023
        },
        {
            "authors": [
                "M Hassan Shirali-Shahreza",
                "Mohammad Shirali-Shahreza"
            ],
            "title": "A new synonym text steganography",
            "venue": "In 2008 international conference on intelligent information hiding and multimedia signal processing,",
            "year": 2008
        },
        {
            "authors": [
                "Katzenbeisser Stefan",
                "A Petitcolas Fabien"
            ],
            "title": "Information hiding techniques for steganography and digital watermarking",
            "year": 2000
        },
        {
            "authors": [
                "Yuchen Sun",
                "Tianpeng Liu",
                "Panhe Hu",
                "Qing Liao",
                "Shouling Ji",
                "Nenghai Yu",
                "Deke Guo",
                "Li Liu"
            ],
            "title": "Deep intellectual property: A survey",
            "venue": "arXiv preprint arXiv:2304.14613,",
            "year": 2023
        },
        {
            "authors": [
                "Reuben Tan",
                "Bryan A Plummer",
                "Kate Saenko"
            ],
            "title": "Detecting cross-modal inconsistency to defend against neural fake news",
            "venue": "arXiv preprint arXiv:2009.07698,",
            "year": 2020
        },
        {
            "authors": [
                "Ruixiang Tang",
                "Yu-Neng Chuang",
                "Xia Hu"
            ],
            "title": "The science of detecting llm-generated texts",
            "venue": "arXiv preprint arXiv:2303.07205,",
            "year": 2023
        },
        {
            "authors": [
                "Yi Tay",
                "Dara Bahri",
                "Che Zheng",
                "Clifford Brunk",
                "Donald Metzler",
                "Andrew Tomkins"
            ],
            "title": "Reverse engineering configurations of neural text generation models",
            "venue": "arXiv preprint arXiv:2004.06201,",
            "year": 2020
        },
        {
            "authors": [
                "Mercan Topkara",
                "Cuneyt M Taskiran",
                "Edward J Delp III"
            ],
            "title": "Natural language watermarking",
            "venue": "In Security, Steganography, and Watermarking of Multimedia Contents VII,",
            "year": 2005
        },
        {
            "authors": [
                "Mercan Topkara",
                "Giuseppe Riccardi",
                "Dilek Hakkani-T\u00fcr",
                "Mikhail J Atallah"
            ],
            "title": "Natural language watermarking: Challenges in building a practical system",
            "venue": "In Security, Steganography, and Watermarking of Multimedia Contents VIII,",
            "year": 2006
        },
        {
            "authors": [
                "Mercan Topkara",
                "Umut Topkara",
                "Mikhail J Atallah"
            ],
            "title": "Words are not enough: sentence level natural language watermarking",
            "venue": "In Proceedings of the 4th ACM international workshop on Contents protection and security,",
            "year": 2006
        },
        {
            "authors": [
                "Umut Topkara",
                "Mercan Topkara",
                "Mikhail J Atallah"
            ],
            "title": "The hiding virtues of ambiguity: quantifiably resilient watermarking of natural language text through synonym substitutions",
            "venue": "In Proceedings of the 8th workshop on Multimedia and security,",
            "year": 2006
        },
        {
            "authors": [
                "Hugo Touvron",
                "Louis Martin",
                "Kevin Stone",
                "Peter Albert",
                "Amjad Almahairi",
                "Yasmine Babaei",
                "Nikolay Bashlykov",
                "Soumya Batra",
                "Prajjwal Bhargava",
                "Shruti Bhosale"
            ],
            "title": "Llama 2: Open foundation and fine-tuned chat models",
            "venue": "arXiv preprint arXiv:2307.09288,",
            "year": 2023
        },
        {
            "authors": [
                "Honai Ueoka",
                "Yugo Murawaki",
                "Sadao Kurohashi"
            ],
            "title": "Frustratingly easy edit-based linguistic steganography with a masked language model",
            "venue": "arXiv preprint arXiv:2104.09833,",
            "year": 2021
        },
        {
            "authors": [
                "Ashish Venugopal",
                "Jakob Uszkoreit",
                "David Talbot",
                "Franz Josef Och",
                "Juri Ganitkevitch"
            ],
            "title": "Watermarking the outputs of structured prediction with an application in statistical machine translation",
            "venue": "In Proceedings of the 2011 Conference on Empirical Methods in Natural Language Processing,",
            "year": 2011
        },
        {
            "authors": [
                "Hong Wang",
                "Xuan Luo",
                "Weizhi Wang",
                "Xifeng Yan"
            ],
            "title": "Bot or human? detecting chatgpt imposters with a single question",
            "venue": "arXiv preprint arXiv:2305.06424,",
            "year": 2023
        },
        {
            "authors": [
                "Lean Wang",
                "Wenkai Yang",
                "Deli Chen",
                "Hao Zhou",
                "Yankai Lin",
                "Fandong Meng",
                "Jie Zhou",
                "Xu Sun"
            ],
            "title": "Towards codable text watermarking for large language models",
            "venue": "arXiv preprint arXiv:2307.15992,",
            "year": 2023
        },
        {
            "authors": [
                "Alex Wilson",
                "Andrew D Ker"
            ],
            "title": "Avoiding detection on twitter: embedding strategies for linguistic steganography",
            "venue": "Society of Photo-optical Instrumentation Engineers,",
            "year": 2016
        },
        {
            "authors": [
                "Alex Wilson",
                "Phil Blunsom",
                "Andrew D Ker"
            ],
            "title": "Linguistic steganography on twitter: hierarchical language modeling with manual interaction",
            "venue": "In Media Watermarking, Security, and Forensics 2014,",
            "year": 2014
        },
        {
            "authors": [
                "Alex Wilson",
                "Phil Blunsom",
                "Andrew Ker"
            ],
            "title": "Detection of steganographic techniques on twitter",
            "venue": "In Proceedings of the 2015 Conference on Empirical Methods in Natural Language Processing,",
            "year": 2015
        },
        {
            "authors": [
                "Thomas Wolf",
                "Lysandre Debut",
                "Victor Sanh",
                "Julien Chaumond",
                "Clement Delangue",
                "Anthony Moi",
                "Pierric Cistac",
                "Tim Rault",
                "R\u00e9mi Louf",
                "Morgan Funtowicz"
            ],
            "title": "Huggingface\u2019s transformers: State-of-the-art natural language processing",
            "year": 1910
        },
        {
            "authors": [
                "Max Wolff",
                "Stuart Wolff"
            ],
            "title": "Attacking neural text detectors",
            "venue": "arXiv preprint arXiv:2002.11768,",
            "year": 2020
        },
        {
            "authors": [
                "KiYoon Yoo",
                "Wonhyuk Ahn",
                "Jiho Jang",
                "Nojun Kwak"
            ],
            "title": "Robust natural language watermarking",
            "venue": "Artificial Intelligence,",
            "year": 2022
        },
        {
            "authors": [
                "Mirza",
                "Stefan"
            ],
            "title": "even before the advent of large language models. Several techniques involve editing existing text to add a watermark, such as changing synonyms",
            "venue": "Petitcolas et al.,",
            "year": 2000
        }
    ],
    "sections": [
        {
            "heading": "1 INTRODUCTION",
            "text": "In recent years, large language models (LLMs) (Google, 2023; OpenAI, 2023a;b) have become an indispensable tool for a wide range of tasks, including text generation (Iyer et al., 2022; Chung et al., 2022), translation (Bojar et al., 2017; Barrault et al., 2019), summarization (Liu & Lapata, 2019), etc. With the escalating misuse of LLMs, such as plagiarism, tracking the usage of text generated by machines has become increasingly important. One viable method to monitor the usage of LLMs is watermarking (Gu et al., 2022; Kirchenbauer et al., 2023; Venugopal et al., 2011), which embeds imperceptible information within the generated text, thereby allowing for efficient detection and tracking of the model\u2019s potential abuse.\nWatermarking techniques can serve multiple purposes, such as embedding ownership information within the generated text to protect the intellectual property rights of the model. It can also help mitigate potential harm caused by LLMs by monitoring where the model is being used and whether it is being misused or abused.\nA good watermarking method should not adversely affect the normal usage of the language model or degrade the quality of the generated text. However, a prevailing belief holds that there is an inevitable trade-off between the strength of the watermark and the quality of the output text. For instance, recent work by Kirchenbauer et al. (2023) introduced a method that augmented the logits of a randomly selected set of \u201dgreen\u201d tokens. By tuning the \u201cmagnitude of logits adjustment\u201d, they demonstrated a trade-off between watermark strength and text quality.\nOur primary contribution is to challenge this conventional wisdom. We show that with the right implementation, watermarking can be accomplished without affecting the output quality. We refer to this particular type of watermark as an unbiased watermark. We approach the problem of output quality degradation from the perspective of watermark detection. We posit that if the watermark causes a decline in output quality, there should be a method to guess the presence of the watermark based on the quality. Conversely, if the watermark cannot be detected, it implies that the output quality remains unaffected. Specifically, we provide a proof that with a suitable implementation, watermarking does not affect the output probability distribution. This has significant implications,\nas users who do not have the private key are unable to discern whether a service provider has applied watermarking to the model. Furthermore, the addition of watermarking does not affect the performance of the generated text in any downstream tasks. Our main contributions can be summarized as follows: \u2022 We introduce unbiased watermark, an innovative family of watermark methods that guarantee the\nnon-degradation of text quality. In addition, we offer a comprehensive framework that facilitates the design and detection of unbiased watermarks.\n\u2022 We propose two innovative and practical watermarking techniques known as \u03b4-reweight and \u03b3reweight. Through extensive experimentation, we demonstrate that these techniques preserve output quality in machine translation and text summarization tasks.\n\u2022 We develop an advanced maximin variant of the original log-likelihood ratio test for watermark detection. This novel detection method comes with theoretical guarantees, specifically an upper bound on type I error, thus enhancing the reliability of watermark detection in language models."
        },
        {
            "heading": "2 PRELIMINARY",
            "text": "In this section, we delve into the problem of watermarking in the context of LLMs. We begin by setting up the problem and defining essential concepts. Problem Modeling: We first introduce several notations to formalize the problem. Let \u03a3 denote the vocabulary set, which is the set of all possible tokens an LLM can generate in a single step. We then define the set \u03a3\u2217 as the collection of all possible strings of any length, including those of length zero.\nAn LLM generates a sequence of tokens conditioned on a given context. In a single step, the probability of generating the next token xn+1 \u2208 \u03a3 given the current context, x1, x2, ..., xn, can be denoted as PM (xn+1 | x1, x2, ..., xn). The LLM operates in an autoregressive fashion, which means the joint probability of generating multiple tokens xn+1, . . . , xn+m can be written as:\nPM (xn+1, . . . , xn+m | x1, x2, ..., xn) = m\u220f i=1 PM (xn+i | x1, x2, ..., xn, xn+1, . . . , xn+i\u22121).\nFor simplicity, we use the following notation: PM (xn+1:n+m | x1:n), where xn+1:n+m = (xn+1, . . . , xn+m) \u2208 \u03a3\u2217. In the context of watermarking, we introduce a service provider that holds a private key k from the key space K. The key k \u2208 K is chosen at random from the prior distribution PK(k). The watermarked output of the LLM follows distribution PM,w(xn+1 | x1, x2, ..., xn; k), which is conditioned on both the key k and the context x1:n. Similarly, we use the notation PM,w(xn+1:n+m | x1:n; k) for the probability of generating a sequence of tokens in a watermarked model.\nObjective. Our goal is to devise a watermarking scheme that: a) is efficiently detectable by the service provider; b) can\u2019t be detected by users and does not negatively impact the quality of the output.\nThe reason we focus on the detection of watermarks by users is that it is closely related to the output quality. If the watermark causes a degradation in the output quality, there should exist a method to infer the presence of the watermark by examining the quality. Conversely, if the watermark is undetectable, it implies that it does not impact the output quality.\nFrom a statistical testing perspective, a watermark is considered strictly undetectable if the probability distributions of the watermarked and non-watermarked outputs are identical. To capture this notion, we define several desirable properties of watermarking schemes. Definition 1 (n-shot-undetectable). For a fixed input sequence a \u2208 \u03a3\u2217, we say that watermarked LLM and key prior pair (PM,w, PK) is n-shot-undetectable compared to original LLM PM if\nn\u220f i=1 PM (x i | a) = \u2211 k\u2208K PK(k) n\u220f i=1 PM,w(x i | a; k), for any n number of strings xi \u2208 \u03a3\u2217.\nDefinition 2 (downstream-invariant). We say the watermarked LLM and key prior pair (PM,w, PK) are invariant compared to original LLM PM on downstream tasks iff\nEx\u223cPM,w(\u00b7|a;k),k\u223cPK [f(x)] = Ex\u223cPM (\u00b7|a)[f(x)],\nfor any strings x,a \u2208 \u03a3\u2217, and for any metric f : \u03a3\u2217 \u2192 R.\nNote that the one-shot-undetectable property implies the downstream invariant property, as identical distributions yield identical expectations for any function. Interestingly, this implication does not require the n-shot-undetectable property for n > 1, which means a watermarking scheme that is one-shot-undetectable can still maintain the output quality for downstream tasks even if the user might discern the existence of the watermark through multiple generation requests.\nIn summary, we have outlined the preliminary concepts and objectives for developing a watermarking scheme for LLMs. We highlight the desired properties of n-shot-undetectability and downstream invariance, as they provide a rigorous theoretical guarantee of quality preservation and integrity in the deployment of watermark schema. In Section 4, we will present a watermark framework that is provably n-shot-undetectable for any given integer n \u2265 1."
        },
        {
            "heading": "3 WARM UP: UNDETECTABILITY IN A SIMPLIFIED TOY ENVIRONMENT",
            "text": "In this subsection, we aim to prove the feasibility of undetectability in a highly simplified toy environment. This preliminary analysis serves as a foundation for understanding the more complex scenarios that follow.\nSettings. Consider a service provider that offers a random number generation service. The service outputs a uniformly distributed random number in the set {0, 1}. The clean generation process can be represented as PM (x) = 1/2, \u2200x \u2208 {0, 1}. We assume that the key k belongs to the set {0, 1} and is selected with equal probability. With the watermark added, the probability of the new output can be expressed as: PM,w(x | k) = \u03b4k(x). Recall that the one-shot-undetectable property can be represented as PM (x) = \u2211 k\u2208K PM,w(x | k)PK(k). Suppose that a user can only make a single request to the service. If the user is unaware of the key, the user will be unable to distinguish whether the received result is watermarked or not. Therefore, in this simplified scenario, the undetectability of the watermark is achieved.\nHowever, there is a considerable gap between this toy example and the practical implementation of watermarking in LLMs. Firstly, the symbol set \u03a3 in LLMs is far more complex than the binary set {0, 1}, and the probability distribution is not uniform. Besides, the generation process in LLMs is autoregressive, which means that more than one symbol are generated iteratively. Furthermore, the toy example does not satisfy the n-shot-undetectable property for n > 1.\nDespite these differences, this simple example provides essential insights that help in understanding the following sections where we address these challenges. The underlying principles of undetectability remain constant, while their application becomes more intricate in a more complex environment."
        },
        {
            "heading": "4 WATERMARKING WITH UNBIASED REWEIGHTING",
            "text": "In this section, we build upon the intuition from the previous section and extend the approach to LLMs\u2019 generation. The section is structured as follows: Section 4.1 introduces a fundamental mathematical tool for addressing the reweighting problem in general discrete probability distributions. Section 4.2 applies the reweighting technique to LLMs. Section 4.3 presents the final framework."
        },
        {
            "heading": "4.1 DISTRIBUTION REWEIGHTING",
            "text": "In its most general form, we consider a random watermark code E and a reweight function RE : \u2206\u03a3 \u2192 \u2206\u03a3, which depends on the random watermark code E. The set of all possible probability distributions on the symbol set \u03a3 is denoted as \u2206\u03a3, which forms a simplex.\nDefinition 3. A reweighting function is a tuple (E , PE , R) where E is called the watermark code space, PE is a probability distribution on space E , and R is a function R : E \u00d7 \u2206\u03a3 \u2192 \u2206\u03a3. For a specific watermark code E \u2208 E , we denote the partially evaluated reweighting function as RE : \u2206\u03a3 \u2192 \u2206\u03a3. Definition 4. Given a random watermark code E and a reweighting function RE : \u2206\u03a3 \u2192 \u2206\u03a3, we say that R is an unbiased reweighting function if and only if for all P \u2208 \u2206\u03a3, EE [RE(P )] = P ."
        },
        {
            "heading": "4.1.1 EXISTING REWEIGHTING METHODS",
            "text": "Kirchenbauer et al. (2023) essentially comprise two reweighting methods in their work, but neither of them satisfies the unbiased property.\nBoth methods have E as the set of mappings f : \u03a3 \u2192 {red, green}, such that f maps half of the tokens in \u03a3 to \u2018red\u2019 and the other half to \u2018green\u2019, and PE as a uniform distribution. Therefore, the random watermark code E assigns each symbol to either red or green. The \u201cHard Red List\u201d method sets the probability of all red symbols to zero and renormalizes the probabilities of the remaining vocabulary. The second method is \u201cSoft Red List\u201d blocking, where they randomly select the same \u201cRed List\u201d as the first method and decrease the corresponding probability for red symbols by adding a constant \u03b4 to the logits of the green symbols, then apply softmax to obtain the final probabilities."
        },
        {
            "heading": "4.1.2 UNBIASED REWEIGHTING METHODS",
            "text": "In this section, we present two reweighting methods that satisfy the unbiased property. \u03b4-reweight: Let the watermark code space E be the interval [0, 1], and let PE be the uniform probability on E . Leveraging Inverse Transform Sampling1 (Devroye, 1986), we can sample from distribution P \u2208 \u2206\u03a3 using a uniformly distributed random number in [0, 1]. Therefore, we have a mapping samplingP : E \u2192 \u03a3. The \u03b4-reweight just returns a delta distribution RE(P ) = \u03b4samplingP (E). It is important to note that while the reweighted distribution for each individual random event E is a delta distribution, the mean output token probabilities remain the original distribution P when considering the randomness of E. \u03b3-reweight: Let the watermark code space E be the set of all bijective function between vocabularies set \u03a3 and a set of indices [|\u03a3|] = {1, . . . , |\u03a3|}, where |\u03a3| is the size of vocabularies set \u03a3. Essentially, any watermark code E is an indexing function for vocabularies set \u03a3, and is also equivalent to a total order on \u03a3. Let PE be the uniform probability on E , it is easy to sample a watermark code E by randomly shuffling the symbol list.\nAssume the original distribution is PT (t) \u2208 \u2206\u03a3,\u2200t \u2208 \u03a3. Given the watermark code E : \u03a3\u2192 [|\u03a3|], we construct auxiliary functions FI(i) = \u2211 t\u2208\u03a3 1(E(t) \u2264 i)PT (t), FS(s) = max(2s \u2212 1, 0), FI\u2032(i) = FS(FI(i)). The \u03b3-reweight yields new distribution PT \u2032(t) = FI\u2032(E(t))\u2212 FI\u2032(E(t)\u2212 1).\n... \u201c but\u201d ... \u201cized\u201d ...\nE\nReweight\n\u201cized\u201d\n0 1\nFigure 1: Illustration of \u03b4-reweight.\n... \u201c but\u201d ... \u201cized\u201d ...\n... \u201cized\u201d ... \u201c but\u201d ...\n0 1/2 1\nShuffle\nReweight\n\u201cized\u201d ... \u201c but\u201d ...\n0 1\nFigure 2: Illustration of \u03b3-reweight.\nWe provide illustrations of the \u03b4-reweight and \u03b3-reweight methods in Figures 1 and 2. Each block represents a token, and the width represents the probability of that token, so the total length is 1 The left panel shows the \u03b4-reweight method, where each individual random watermark code E \u2208 [0, 1] uniformly sampled from interval [0, 1] corresponds to a specific token according to the horizontal axis, and the reweighted distribution is just a \u03b4 distribution on that token, such that the selected token has 1 probability, and all other vocabulary tokens have a probability of 0. The right panel demonstrates the \u03b3-reweight method. First, the symbol set is shuffled. Then, the left half of the regions are rejected, and the remaining regions are amplified with a factor of 2.\nBoth methods are unbiased1 when considering the randomness of the watermark code E. For \u03b4reweight, we can see that by noticing that the probability of returning a \u03b4 distribution on a token is just the original probability on that token, therefore the weighted average of all delta distributions is still the original probability. In the case of \u03b3-reweight, although certain regions are rejected and the other regions are amplified, every token has the same probability to be in the rejected or amplified region, thus ensuring the unbiased property.\n1Detailed definition and rigorous proof can be found in Appendix B"
        },
        {
            "heading": "4.2 REWEIGHTING FOR AUTOREGRESSIVE MODEL",
            "text": "The reweighting methods presented in the previous section can be applied to single token-generation directly. Given a prefix x1:n, the probability distribution for generating a new token without a watermark is denoted as PM (\u00b7|x1:n) \u2208 \u2206\u03a3. For a random watermark code E, we sample from a new distribution PM,w(\u00b7|x1:n) = RE(PM (\u00b7|x1:n)) \u2208 \u2206\u03a3. If the reweighting function is unbiased, we have EE [RE(PM (\u00b7|x1:n))] = PM (\u00b7|x1:n). This ensures that, for an individual unaware of the watermark code, it is impossible to determine whether a new token is sampled directly from PM (\u00b7|x1:n) or from PM,w(\u00b7|x1:n;E) for a random watermark E. However, if the watermark code is known, one can perform statistical hypothesis testing to determine the likelihood of a token being sampled from either distribution.\nThe main challenge now is constructing the watermark code E. Since the LLM generation task is autoregressive, multiple reweighting steps are required, with each step needing a watermark code Ei for reweighting the distribution of token xi."
        },
        {
            "heading": "4.2.1 INDEPENDENCE OF WATERMARK CODES",
            "text": "It is crucial that Ei values are independent to ensure the unbiased nature of the entire sequence, rather than just the single-token generation process. Theorem 5. Given an unbiased reweighting function (E , PE , R), if Ei values are i.i.d. with the distribution PE , we have: EE1,...,En [PM,w(x1:n|a1:m)] = PM (x1:n|a1:m). If the Ei values are not independent, we cannot guarantee that the generation probability of the entire sequence remains unbiased. As an extreme example, consider a case where all Ei values are identical. Referring to the random bit example in the previous section, assume that the correct distribution is a sequence where each token is a random 0 or 1 with equal probability. Identical Ei values would result in identical token outputs, ultimately producing sequences consisting solely of 0\u2019s or 1\u2019s, which is clearly biased."
        },
        {
            "heading": "4.2.2 CONTEXT CODE",
            "text": "To construct a large number of independent watermark codes Ei during watermarking and to know the used Ei values during watermark detection, we follow an approach similar to Kirchenbauer et al. (2023) by combining the information from the prefix and a secret key to construct Ei.\nFor a single token generation process, given a prefix x1, x2, ..., xn, we consider an abstract context code space C and an abstract context code generation function cc : \u03a3\u2217 \u2192 C. Based on the prefix, we construct the context code cn+1 = cc(x1, x2, ..., xn). Specific examples include using the entire prefix cn+1 = (x1, x2, ..., xn), and using the m most recent prefixes cn+1 = (xn\u2212m+1, ..., xn). Our comprehensive framework accommodates diverse context code generation approaches, particularly those that integrate error-correcting mechanisms to augment watermark resilience in the face of text manipulation attacks. Nevertheless, we refrain from delving into these strategies within the confines of this paper and consider it a subject for subsequent investigation.\nThe final watermark code is defined as Ei = E\u0302(ci, k), using a watermark code generation function E\u0302 : C \u00d7K \u2192 E . Definition 6. Given an unbiased reweighting function (E , PE , R) and a context code space C, an unbiased watermark code generation function is a tuple (E , PE , R, C,K, PK , E\u0302) that satisfies:\n1. Unbiasedness: Ek\u223cPK [RE\u0302(c,k)(P )] = P,\u2200P \u2208 \u2206\u03a3,\u2200c \u2208 C. 2. Independence: For any n distinct c1, . . . , cn \u2208 C, the values RE\u0302(ci,k)(P ) are mutually\nindependent. Theorem 7. For any unbiased reweighting function and context code space, an unbiased watermark code generation function always exists. In practice, pseudorandom numbers can be used to implement the unbiased watermark code generation function in the above theorem. Specifically, the hash value hash(c, k) can be used as a random seed to sample E from PE as an implementation of E = E\u0302(c, k). In this paper, we employ SHA-256 for hash function and a 1024-bit random bitstring as the key k.\nAn unbiased watermark code generation function ensures that watermark codes Ei are independent with each other if only their context codes are different. During the generation of a sequence,\ncontext codes may be repeated, although this is a rare event in practice. If ci and cj are equal, then Ei and Ej are also equal, violating the independence of Ei. A simple workaround is to skip reweighting for a token when encountering a previously used context code. In other words, we set PM,w(\u00b7|a1:m,x1:i\u22121) = PM (\u00b7|a1:m,x1:i\u22121) if the context code has appeared before."
        },
        {
            "heading": "4.3 FRAMEWORK",
            "text": "Algorithm 1 Watermarking framework 1: Input: key for watermark k \u2208 K, prompt a1:m \u2208 \u03a3\u2217, generate length n \u2208 N, initial code\nhistory cch \u2208 2C , context code function cc : \u03a3\u2217 \u2192 C, watermark code generation function E\u0302 : C \u00d7K \u2192 E , and reweighting function R : E \u00d7\u2206\u03a3 \u2192 \u2206\u03a3. 2: for t = 1, . . . , n do 3: Pi \u2190 PM (\u00b7 | a1:m,x1:i\u22121) \u25b7 original distribution 4: ci \u2190 cc(\u00b7 | a1:m,x1:i\u22121) \u25b7 context code 5: if ci \u2208 cch then 6: Qi \u2190 Pi \u25b7 skip the reweighting 7: else 8: cch\u2190 cch \u222a {ci} \u25b7 record history 9: Ei \u2190 E\u0302(ci, k) \u25b7 watermark code 10: Qi \u2190 REi(Pi) \u25b7 reweighted distribution 11: Sample the next token xi using distribution Qi 12: return x1:n\nIntegrating the tools discussed earlier, we present a general framework for watermarking here. The algorithm for this framework is outlined in Algorithm 1.\nWe note that our abstract framework requires the specification of two key components in order to be practically implemented: the unbiased reweight function RE and the context code function cc."
        },
        {
            "heading": "5 STATISTICAL HYPOTHESIS TESTING FOR WATERMARK DETECTION",
            "text": "In the previous section, we discussed the process of adding a watermark to a text based on a secret key k and a given prompt a1:m. The watermark-embedded text can be sampled from the distribution PM,w(x1:n|a1:m; k). In this section, we focus on the watermark detection task, which is the inverse problem of watermark embedding.\nGiven a text x1:n, the goal of watermark detection is to infer whether it is more likely to be generated from the unmarked distribution PM (x1:n|a1:m) or the marked distribution PM,w(x1:n|a1:m; k). This problem can be formulated as a statistical hypothesis test between two competing hypotheses: H0, which posits that x1:n follows the unmarked distribution, and H1, which posits that x1:n follows the marked distribution."
        },
        {
            "heading": "5.1 SCORE-BASED TESING",
            "text": "We focus on a particular kind of score-based testing, which assigns a score to each token in the text. The score can be interpreted as the confidence that the token was generated by the watermark model rather than the original model. Scores si can be computed based on x1:i, in accordance with the autoregressive manner of the generation process.\nThe total score S is given by S = \u2211n\ni=1 si. A threshold S\u0302 is set such that if S < S\u0302, the null hypothesis H0 is accepted, indicating insufficient evidence to conclude that the text contains a watermark. Otherwise, the null hypothesis is rejected. There are two types of error probabilities associated with this decision process: type I error, which is the probability of incorrectly rejecting the null hypothesis under H0, denoted as PH0(S \u2265 S\u0302), and type II error, which is the probability of incorrectly accepting the null hypothesis under H1, denoted as PH1(S < S\u0302).\nTo derive theoretical results, we require the scores to have a specific property: under the null hypothesis H0, the exponential momentum of si is bounded, conditioned on the preceding context x1,i\u22121. This requirement leads to an upper bound on \u03b1, the type I error probability.\nTo derive theoretical results, we require that the scores have a particular property: the exponential moment of si under H0 should be bounded, conditioned on the previous text x1,i\u22121. This requirement leads to an upper bound on the type I error rate.\nTheorem 8. Given a probability space (\u2126,A, P ) and a \u03a3-valued stochastic process xi : 1 \u2264 i \u2264 n, as well as an R-valued stochastic process si : 1 \u2264 i \u2264 n, let Fxi := \u03c3(xj | 1 \u2264 j \u2264 i) and Fsi := \u03c3(sj | 1 \u2264 j \u2264 i) be the corresponding filtrations, where \u03c3(\u00b7) denotes the \u03c3-algebra generated by random variables. If Fsi \u2286 Fxi and E[exp(si)|Fxi\u22121] \u2264 1, then P ( \u2211n i=1 si \u2265 t) \u2264 e\u2212t.\nTherefore, to ensure that the type I error probability has an upper bound \u03b1, we can set the threshold S\u0302 as S\u0302 = \u2212 log(\u03b1). In the following, we discuss two special scores."
        },
        {
            "heading": "5.2 LOG LIKELIHOOD RATIO (LLR) SCORE",
            "text": "According to the Neyman-Pearson lemma, the likelihood ratio test is the most powerful test among all tests with the same type I error rate. Specifically, the log-likelihood ratio (LLR) score is defined as si = log\nPM,w(xi|a1:m,x1:i\u22121;k) PM (xi|a1:m,x1:i\u22121) , and the total score becomes S = log PM,w(x1:n|a1:m;k) PM (x1:n|a1:m) .\nWe now provide an optimization derivation of the above si to gain intuition and set the foundation for the maximin variant of the LLR score in the next section. Let Pi = PM (\u00b7|a1:m,x1:i\u22121), Qi = PM,w(\u00b7|a1:m,x1:i\u22121; k), and let si = Si(xi) \u2208 R denote the score corresponding to different xi. Note that Pi, Qi, and Si are all functions with signature \u03a3 \u2192 R, therefore equivalent to vectors of dimension |\u03a3|. We can define the inner product as \u27e8Pi, Si\u27e9 = \u2211 x\u2208\u03a3 Pi(x)Si(x).\nThe requirement E[exp(si)|F xi\u22121] \u2264 1 can be reformulated as \u27e8Pi, exp(Si)\u27e9 \u2264 1, where the exponential function is applied element-wise. Instead of minimizing the type II error directly, we aim to maximize the average score under H1, i.e., \u27e8Qi, Si\u27e9. The optimization problem becomes maxSi \u27e8Qi, Si\u27e9, s.t. \u27e8Pi, exp(Si)\u27e9 \u2264 1. The optimal solution is given by Si(x) = log\nQi(x) Pi(x) , which recovers the optimal log likelihood ratio score."
        },
        {
            "heading": "5.3 MAXIMIN VARIANT OF LLR SCORE",
            "text": "One major limitation of the LLR score described in the previous section is that when Qi(x) = 0, Si(x) = \u2212\u221e. This means that as long as a single token does not come from the watermark model PM,w, the score becomes negative infinity, making it impossible to reject the null hypothesis H0.\nA more general reason for this issue is that the watermark model PM,w used in the detection process may not exactly match the true distribution of the watermarked text. In practice, potential sources of discrepancy include editing (e.g., a text sampled from PM,w may undergo some degree of editing before being watermark detection) and imperfect estimation of the generation process (e.g., due to lack of knowledge of the exact prompt and temperature used during generation).\nTo address this problem, we consider a perturbed generation distribution. Instead of the original hypothesis H1, where x1:n follows the watermark distribution PM,w, we now assume that x1:n follows a distribution P \u2032M,w, which is similar to but not identical to PM,w. Specifically, during the generation of each token, the total variation (TV) distance between Q\u2032i and Qi is bounded by d.\nThe corresponding new optimization problem is\nmax Si min Q\u2032i\u2208\u2206\u03a3,TV (Q\u2032i,Qi)\u2264d\n\u27e8Q\u2032i, Si\u27e9, s.t. \u27e8Pi, exp(Si)\u27e9 \u2264 1.\nIntuitively, the optimal solution for Q\u2032i in the inner optimization decreases Q \u2032 i(x) when Si(x) is large and increases Q\u2032i(x) when Si(x) is small.\nThe computation of the maximin solution can be done efficiently in O\u0303(|\u03a3|) time and the specific algorithm is shown in Appendix B.5.\nIt is important to note that the maximin variant of the LLR score is more robust than the standard LLR score, as it yields higher scores when the text has undergone some degree of editing. However, it is not specifically designed to defend against any attacks.\nA hyperparameter d \u2208 [0, 1] that represent the perturbation strength is introduced in the score. Intuitively, if the text to be detected has undergone more editing and deviates further from the distribution\nPM,w, d should be larger. In practice, we recommend using grid search to select the best value of d. Assuming there are A candidate values for d, corresponding to A different scores s(a)i (1 \u2264 a \u2264 A), we can modify Theorem 8 as follows.\nTheorem 9. Under the same conditions as Theorem 8, but with multiple scores s(a)i , we have\nP ( max\n1\u2264a\u2264A\n( n\u2211\ni=1\ns (a) i\n) \u2265 t ) \u2264 Ae\u2212t.\nThus, when using grid search, the final threshold should be adjusted as S\u0302 = \u2212 log(\u03b1) + log(A). This ensures that the upper bound of the type I error is still \u03b1."
        },
        {
            "heading": "6 EXPERIMENTS",
            "text": "We evaluate the performance of our Unbiased Watermarks on two important applications of seq2seq models: text summarization (TS) and machine translation (MT). For the TS task, we use the BARTlarge model (Liu et al., 2020) and the CNN-DM (Hermann et al., 2015) corpus as our testing dataset. The MT task involves translating English to Romanian, for which we employ the Multilingual BART (MBart) (Liu et al., 2020) model on the WMT\u201914 En-Ro corpus. For further details on the experiment setup, please refer to Appendix E.\nOur primary focus is to compare the performance of our proposed unbiased watermarking methods including the \u03b4-reweight and \u03b3-reweight, with the soft-red-list method presented by Kirchenbauer et al. (2023). The strength of the watermark in the soft-red-list approach is controlled by a parameter \u03b4.\nThe quality of output post-watermarking is presented in Table 1. We observed that the output quality remains unaffected by our unbiased watermark methods, both for the \u03b4-reweight and \u03b3-reweight, irrespective of the task and metric. Conversely, the soft-red-list method, when \u03b4 = 0, does not introduce any watermark and hence does not affect output quality. However, for \u03b4 > 0, it significantly impairs the quality of output.\nFigure 3 provides a more intuitive depiction of the score distributions. It is evident that our unbiased watermark methods not only ensure that the mean performance remains unaffected but also that the performance distribution is stable. Conversely, the soft-red-list method shows a notable performance decrease.\nIn terms of watermark detection, we compute score associated with each token. The mean and variance of score per token for TS and MT are presented in Table 2. As a heuristic, if the sum of the scores for all tokens in a sentence reaches 10, a p-value of less than 0.0005 is ensured. If the sum score hits 20, the p-value must be less than 3e\u22128.\nAdditionally, we provide an example of watermarking applied to a completion task in Table 3. It visually demonstrates the score distribution across tokens: positive scores are represented in green, and negative ones in red. The intensity of the color corresponds to the magnitude of the score, with darker shades representing larger absolute values."
        },
        {
            "heading": "7 RELATED WORK",
            "text": "The idea of watermarking text has been widely explored by many researchers (Cox et al., 2007; Kamaruddin et al., 2018; Podilchuk & Delp, 2001; Potdar et al., 2005; Atallah et al., 2001; Jalil & Mirza, 2009; Stefan et al., 2000; Petitcolas et al., 1999), even before the advent of large language models.\nRecent advancements in generative models have opened new possibilities for directly generating watermarked results. Two relevant prior works in this domain are by Kirchenbauer et al. (2023) and Aaronson (2022). Various concurrent studies (Christ et al., 2023; Kuditipudi et al., 2023; Wang et al., 2023b; Yoo et al., 2023b) have further enriched this domain. Due to space constraints, we moved the in-depth analysis and other related work to Section A."
        },
        {
            "heading": "8 CONCLUSION",
            "text": "Overall, this paper provides a novel framework of watermarking for language models, demonstrating that it is possible to use watermark to protect intellectual property and monitor potential misuse without compromising the quality of the generated text. This research serves as a valuable foundation for future work in the field of watermarking for large language models.\n2This is an upper bound computed based on Theorem 9. The upper bound could be larger than 1, but this does not necessarily imply that the p-value exceeds 1."
        },
        {
            "heading": "A RELATED WORKS",
            "text": ""
        },
        {
            "heading": "A.1 TEXT WATERMARKING",
            "text": "The idea of watermarking text has been widely explored by many researchers (Cox et al., 2007; Kamaruddin et al., 2018; Podilchuk & Delp, 2001; Potdar et al., 2005; Atallah et al., 2001; Jalil & Mirza, 2009; Stefan et al., 2000; Petitcolas et al., 1999), even before the advent of large language models. Several techniques involve editing existing text to add a watermark, such as changing synonyms (Topkara et al., 2005; 2006c; Chiang et al., 2004; Venugopal et al., 2011; Yang et al., 2022) or visually indistinguishable words (Rizzo et al., 2019), altering sentence structures (Topkara et al., 2006b;a; Meral et al., 2009), and employing neural networks (He et al., 2022a;b; Yoo et al., 2023a).\nRecent advancements in generative models have opened new possibilities for directly generating watermarked results. Two prior works in this domain are by Kirchenbauer et al. (2023) and Aaronson (2022). Kirchenbauer et al.\u2019s pioneering work, which uses the previous context to generate watermarked tokens, heavily influences our approach. However, their watermarking technique can introduce bias to the output, leading to performance degradation. Our work addresses this limitation by applying unbiased reweighting and recording context code history.\nAaronson (2022) have talked about using a pseudo-random cryptographic function for watermarking, but the details are not disclosed, making it challenging to conduct a direct comparison. Aaronson\u2019s \u201ccryptographic pseudorandom function\u201d could be a special case of reweighting function in this paper. However, in his blog, there is no apparent structure akin to \u201ccontext code history\u201d, a mechanism that plays a crucial role in our work to ensure n-shot-undetectability. Therefore, it remains uncertain whether Aaronson\u2019s technique could offer a similar theoretical guarantee of nshot-undetectability as ours. Additionally, it is not clear if their method provides an upper bound on type I error, like Theorem 8.\nSeveral concurrent studies have explored methods to reduce the bias in watermarking. (Christ et al., 2023) depends on computational power to ensure that an attacker cannot efficiently detect watermarks. This approach presents a different trade-off from our work; while we rely on additional watermark storage, we can strictly guarantee n-shot undetectability, regardless of the computational resources available to the attacker. Later, Kuditipudi et al. (2023) builds a watermark based on a watermark key sequence. However, when the generated content length exceeds the length of the\nwatermark key sequence, it may use the same key sequence, resulting in a compromise of strict unbiasedness.\nAdditionally, there has been research focus on multi-bit watermarking such as Wang et al. (2023b) and Yoo et al. (2023b)."
        },
        {
            "heading": "A.2 ATTACKS ON WATERMARKS",
            "text": "Alongside the development of watermarking technologies, various methods to modify and remove these watermarks and their countermeasures have also been explored. These include attacks based on invisible characters and homoglyphs (Gabrilovich & Gontmakher, 2002; Helfrich & Neff, 2012; Pajola & Conti, 2021; Boucher et al., 2022), generative attacks such as those that prompted the model to change its output in a predictable and easily reversible way (Kirchenbauer et al., 2023), and specific instances such as the emoji attack (Goodside, 2023), and paraphrasing attacks (Sadasivan et al., 2023; Krishna et al., 2023)."
        },
        {
            "heading": "A.3 STEGANOGRAPHY IN TEXT",
            "text": "Steganography hides information in text primarily for secret communication. It bears similarities to watermarking in that it seeks to conceal information. However, while watermarking only needs to detect the presence of a watermark, steganography must recover all embedded information. Many approaches have tried to edit existing text, through rule-based transformations (Wilson et al., 2014; 2015; Wilson & Ker, 2016), synonym-based methods (Shirali-Shahreza & Shirali-Shahreza, 2008), and more recently, neural network-based methods (Abdelnabi & Fritz, 2021; Ueoka et al., 2021). Information can also be embedded directly during generation (Fang et al., 2017; Dai & Cai, 2019; Ziegler et al., 2019)."
        },
        {
            "heading": "A.4 WATERMARKING MODELS",
            "text": "Watermarking has also been applied to models themselves to protect intellectual property rights and to guard against model stealing or extraction (Jia et al., 2021; Boenisch, 2021; Zhao et al., 2023). The aim here is to gather evidence through inference services (Li et al., 2019; Zhang et al., 2018) and can be accomplished by adding backdoors to models (Adi et al., 2018; Gu et al., 2017; 2022). While they are similar to text watermarking in that they embed information without impacting fair use, the focus is on tracing the model rather than the text."
        },
        {
            "heading": "A.5 DETECTING MACHINE-GENERATED TEXT",
            "text": "The objective of detecting machine-generated text lies in discerning whether a given text has been produced by an algorithm or written by a human. Such detection is crucial to prevent misuse and a substantial body of research has explored this area (Zellers et al., 2019; Ippolito et al., 2019; Crothers et al., 2022; Jawahar et al., 2020; Tan et al., 2020; Tay et al., 2020; Tang et al., 2023; Wang et al., 2023a). However, the task has become increasingly challenging due to the continual improvement in language models and the advent of adversarial attacks (Gambini et al., 2022; Wolff & Wolff, 2020; Sadasivan et al., 2023). The difference between this and text watermarking is that watermarking is employed to differentiate whether a text is generated by a particular model or provider, yet the detection of machine-generated text is not concerned with a specific model."
        },
        {
            "heading": "B DETAILED DEFINITION AND ADDITIONAL PROOFS",
            "text": ""
        },
        {
            "heading": "B.1 DETAILED DEFINITION AND ADDITIONAL PROOFS FOR SECTION 4.1",
            "text": "Definition 10 (hard/soft-red-list reweighting (Kirchenbauer et al., 2023)). Given two hyperparameters 0 \u2264 \u03b3 \u2264 1 and \u03b4 \u2265 0, let the watermark code space be E = {E \u2208 {0, 1}\u03a3 |\u2223\u2223E\u22121(1)\u2223\u2223 = \u230a\u03b3|\u03a3|\u230b}, such that f maps \u03b3-portion of the tokens in \u03a3 to 1 (which interpreted as \u201cgreen\u201d) and the other portion to 0 (which interpreted as \u201cred\u201d), and let PE to be the uniform distribution on space E . For any watermark code E, and for any token distribution P \u2208 \u2206\u03a3, the output distribution of the hard-red-list reweighting function on a token t \u2208 \u03a3 is defined by\nRE(P )(t) = E(t)P (t)\u2211\nt\u2208\u03a3 E(t)P (t) assuming\n\u2211 t\u2208\u03a3 E(t)P (t) > 0. The soft-red-list reweighting function\nis defined by RE(P )(t) = exp{logP (t)+\u03b4E(t)}\u2211\nt\u2208\u03a3 exp{logP (t)+\u03b4E(t)} , where \u03b4 > 0 is a fixed constant.\nTheorem 11. Hard-red-list and soft-red-list reweighting functions are biased.\nProof. We first show the hard-red-list reweighting is biased. For \u03b3 = 0.5, consider \u03a3 = {a, b}, P (a) = 0.9, P (b) = 0.1, we have\nRE(P )(a) = 1 2 \u00d7 P (a) P (a) + 0\u00d7 0 P (b) = 0.5 \u0338= 0.9 = P (a).\nWe then show the soft-red-list reweighting is biased. For \u03b3 = 0.5, consider \u03a3 = {a, b}, P (a) = 0.9, P (b) = 0.1, we have\nRE(P )(a) = 1 2 \u00d7 e\n\u03b4P (a)\ne\u03b4P (a) + P (b) +\n1 2 \u00d7 P (a) P (a) + e\u03b4P (b) .\nIt is easy to verify that for any \u03b4 > 0, we have RE(P )(a) < P (a).\nThus, hard/soft-red-list reweighting are both biased.\nDefinition 12 (\u03b4-reweight). Let the watermark code space E be the interval [0, 1], and let E be uniformly distributed on E . Given an arbitrary token distribution P \u2208 \u2206\u03a3, let B be a bijection between \u03a3 and [|\u03a3|], we construct a cumulative density function of P w.r.t. B by FP (t;B) =\u2211\nt\u2032\u2208\u03a3 1(B(t \u2032) \u2264 B(t))P (t\u2032),\u2200t \u2208 \u03a3. Then we can define a mapping samplingP : E \u2192 \u03a3,\nsamplingP (E) = B \u22121(I(E)),\nwhere I(E) = min\nt B(t) s.t. E \u2264 FP (t;B),\nThe \u03b4-reweight function is defined by RE(P ) := \u03b4samplingP (E). Definition 13 (\u03b3-reweight). Let the watermark code space E be the set of all bijective function between vocabularies set \u03a3 and a set of indices [|\u03a3|] = {1, . . . , |\u03a3|}, where |\u03a3| is the size of vocabularies set \u03a3. Assume the original distribution is PT (t) \u2208 \u2206\u03a3,\u2200t \u2208 \u03a3. Given the watermark code E : \u03a3\u2192 [|\u03a3|], we define\nAE(i) := max\n{ 2 (\u2211 t\u2208\u03a3 1(E(t) \u2264 i)PT (t) ) \u2212 1, 0 } ,\nwhere 1(E(t) \u2264 i) = 1 when E(t) \u2264 i otherwise 1(E(t) \u2264 i) = 0. We define PT \u2032(E)(t) := AE(E(t)) \u2212 AE(E(t) \u2212 1). It\u2019s easy to verify PT \u2032(E) is a distribution by \u2200t \u2208 \u03a3, PT \u2032(E)(t) \u2265 0 and \u2211 t\u2208\u03a3 PT \u2032(E)(t) = 1. Thus, \u03b3-reweight function is defined by RE(PT ) := PT \u2032(E).\nTheorem 14. Both \u03b4-reweight and \u03b3-reweight are unbiased reweighting functions.\nProof. According to Definition 4, we need to show EE [RE(P )] = P for arbitrary P \u2208 \u2206\u03a3. For \u03b4-reweight, we have RE(P ) = \u03b4samplingP (E) and E is uniformly distributed on [0, 1]. Thus, we only need to show \u2200t \u2208 \u03a3, EE [\u03b4samplingP (E)(t)] = P (t).\nEE [\u03b4samplingP (E)(t)] = \u222b 1 0 1(samplingP (e) = t) de,\n= \u222b 1 0 1(I(e) = B(t)) de,\n= { FP (t;B)\u2212 FP (B\u22121(B(t)\u2212 1);B) B(t) > 1 FP (t;B) B(t) = 1\n= P (t).\n(1)\nFor \u03b3-reweight, we need to show \u2200t \u2208 \u03a3, EE [RE(PT )(t)] = PT (t)\nEE [RE(PT )(t)] = EE [PT \u2032(E)(t)] = EE [AE(E(t))\u2212AE(E(t)\u2212 1)].\n(2)\nDenoted by gE(i) = 2 (\u2211 t\u2032\u2208\u03a3 1(E(t \u2032) \u2264 i)PT (t\u2032) ) \u2212 1. \u2200E \u2208 E , we consider the reserved order Er of E, we have E(t) + Er(t) = n+ 1 and\ngE(E(t))+gEr (E r(t)\u22121) = 2 (\u2211 t\u2032\u2208\u03a3 [1(E(t\u2032) \u2264 E(t)) + 1(E(t\u2032) \u2265 E(t) + 1)]PT (t\u2032) ) \u22122 = 0.\nSo we have AE(E(t))\u2212AE(E(t)\u2212 1) +AEr (Er(t))\u2212AEr (Er(t)\u2212 1) =max {gE(E(t)), 0} \u2212max {gE(E(t)\u2212 1), 0}+max {grE(Er(t)), 0} \u2212max {grE(Er(t)\u2212 1), 0} =gE(E(t)))1(gE(E(t)) > 0)\u2212 gEr (Er(t)\u2212 1)1(gEr (Er(t)\u2212 1) > 0)+ gEr (E r(t))1(gEr (E r(t)) > 0)\u2212 gE(E(t)\u2212 1)1(gE(E(t)\u2212 1) > 0)\n=gE(E(t)))1(gE(E(t)) > 0) + gE(E(t)))1(gE(E(t))) < 0)\u2212 gE(E(t)\u2212 1)1(gE(E(t)\u2212 1) < 0)\u2212 gE(E(t)\u2212 1)1(gE(E(t)\u2212 1) > 0)\n=gE(E(t)))\u2212 gE(E(t)\u2212 1) =2PT (t),\n(3)\nwhich yields\nEE [RE(PT )](t) = EE [AE(E(t))\u2212AE(E(t)\u2212 1)].\n= 1\n2 (EE [AE(E(t))\u2212AE(E(t)\u2212 1)] + EEr [AEr (Er(t))\u2212AEr (Er(t)\u2212 1)]) .\n= 1\n2 EE [2PT (t)]\n= PT (t). (4)"
        },
        {
            "heading": "B.2 ADDITIONAL PROOFS FOR SECTION 4.2",
            "text": "Proof of Theorem 5. We have\nEE1,...,En [PM,w(x1:n|a1:m)] =EE1,...,En\u22121 [EEn [PM,w(x1:n|a1:m)]] =EE1,...,En\u22121 [EEn [PM,w(xn|a1:m,x1:n\u22121)]PM,w(x1:n\u22121|a1:m)] =EEn [PM,w(xn|a1:m,x1:n\u22121)]EE1,...,En\u22121 [PM,w(x1:n\u22121|a1:m)] =PM (xn|a1:m,x1:n\u22121)EE1,...,En\u22121 [PM,w(x1:n\u22121|a1:m)],\nwhere the second last step uses the independence of the Ei values and the last step uses the unbiasedness of the reweighting function. Repeating the same argument for the remaining Ei values, we obtain\nEE1,...,En [PM,w(x1:n|a1:m)] = PM (x1:n|a1:m).\nProof of Theorem 7. Given a watermark code space E and a watermark code distribution PE(e), we construct a key space K = EC , where each key k is a function from the context code space to the watermark code space. The random key probability density function is defined as PK(k) =\u220f\nc\u2208C PE(k(c)).\nThis construction forms a particular instance of an unbiased watermark code generation function."
        },
        {
            "heading": "B.3 DETAILED THEORY FOR SECTION 4.3",
            "text": "Corollary 15. For every generation request by a user, Algorithm 1 can provide a generation result. This generation service is n-shot undetectability for any n \u2208 N+ if the unbiased watermark code generation function is employed, and the context code history is continuously recorded. Specifically, the context code history cch is updated after each invocation of Algorithm 1, and the resulting context code history is used as the initial context code history for the next invocation."
        },
        {
            "heading": "On the other hand, if the context code history is reset after every generation task, the generation",
            "text": "service can only guarantee 1-shot undetectability.\nProof. The key design element in this service is the context code history. By maintaining the context code history throughout the generation process, we can ensure that each time the reweighting is performed, the context code is unique, i.e., it has not appeared in any previous generation tasks. According to the properties of the unbiased watermark code generation function in Definition 6, this guarantees that the watermark codes generated during each reweighting are independent of previously generated watermark codes. As a result, the final distribution is unbiased, and n-shot undetectability is achieved.\nHowever, if the context code history is reset after every generation task, it is possible for two invocations of Algorithm 1 to produce the same context code, leading to the same watermark code. Consequently, n-shot undetectability cannot be guaranteed for n > 1, and the generation service can only provide 1-shot undetectability.\nA straightforward variant of the above approach exists in the form of a batch variant. If the batch size is set to b and the context code history is reset after each batch, the system can ensure b-shot undetectability."
        },
        {
            "heading": "B.4 PROOF OF TAILED BOUNDS IN SECTION 5",
            "text": ""
        },
        {
            "heading": "Proof of Theorem 8.",
            "text": "E [ exp ( n\u2211\ni=1\nsi\n)] = E [ exp ( n\u22121\u2211 i=1 si ) E[exp(sn)|Fxn\u22121] ]\n\u2264 E [ exp ( n\u22121\u2211 i=1 si )] \u2264 \u00b7 \u00b7 \u00b7 \u2264 1,\nwhere the abbreviation in the last step means applying similar inequalities multiple times.\nBy applying the Chernoff bound, we obtain the desired result.\nProof of Theorem 9. From Theorem 3, we know that\nP\n( n\u2211\ni=1\ns (a) i \u2265 t\n) \u2264 e\u2212t.\nThus,\nP ( max\n1\u2264a\u2264A\n( n\u2211\ni=1\ns (a) i\n) \u2265 t ) \u2264\n\u2211 1\u2264a\u2264A P\n( n\u2211\ni=1\ns (a) i \u2265 t\n) \u2264 Ae\u2212t."
        },
        {
            "heading": "B.5 DETAILS ON MAXIMIN VARIANT OF LLR SCORE",
            "text": ""
        },
        {
            "heading": "B.5.1 DERIVATION OF THE SOLUTION",
            "text": "Recall that we are dealing with the maximin problem given as: max Si min Q\u2032i\u2208\u2206\u03a3,TV (Q\u2032i,Qi)\u2264d \u27e8Q\u2032i, Si\u27e9\ns.t. \u27e8Pi, exp(Si)\u27e9 \u2264 1.\nWe can find a relaxation by replacing the constraint Q\u2032i \u2208 \u2206\u03a3 with \u2211 x\u2208\u03a3 Q \u2032 i(x) = 1 and no longer requiring Q\u2032i(x) \u2265 0. Thus, we obtain the following inequality:\nmin Q\u2032i\u2208\u2206\u03a3,TV (Q\u2032i,Qi)\u2264d \u27e8Q\u2032i, Si\u27e9 \u2265 min Q\u2032i, \u2211 x\u2208\u03a3 Q \u2032 i(x)=1,TV (Q \u2032 i,Qi)\u2264d \u27e8Q\u2032i, Si\u27e9.\nThe new maximin problem becomes:\nmax Si min Q\u2032i, \u2211 x\u2208\u03a3 Q \u2032 i(x)=1,TV (Q \u2032 i,Qi)\u2264d \u27e8Q\u2032i, Si\u27e9\ns.t. \u27e8Pi, exp(Si)\u27e9 \u2264 1.\nThis relaxation is tight, meaning it does not affect the final maximin optimal solution. This is because, even though the relaxed problem does not require Q\u2032i(x) \u2265 0, the maximin problem\u2019s optimal solution S\u2217i and Q \u2032 i \u2217 must satisfy Q\u2032i \u2217 (x) \u2265 0. Otherwise, S\u2217i (x) could be further reduced, implying that S\u2217i (x) is not an optimal solution and leading to a contradiction.\nThe inner optimization of the relaxed problem can be solved directly:\nmin Q\u2032i, \u2211 x\u2208\u03a3 Q \u2032 i(x)=1,TV (Q \u2032 i,Qi)\u2264d \u27e8Q\u2032i, Si\u27e9 = \u27e8Qi, Si\u27e9+ d ( min x Si(x)\u2212max x Si(x) ) .\nThis leads to the new maximization optimization problem:\nmax Si \u27e8Qi, Si\u27e9+ d ( min x Si(x)\u2212max x Si(x) )\ns.t. \u27e8Pi, exp(Si)\u27e9 \u2264 1.\nWe can find the KKT conditions for this optimization problem by rewriting it as follows:\nmax Si\n\u27e8Qi, Si\u27e9+ d(maxSi \u2212minSi)\ns.t. \u27e8Pi, exp(Si)\u27e9 \u2264 1, maxSi \u2265 Si(x), minSi \u2264 Si(x).\nLet the Lagrangian be\nL =max Si \u27e8Qi, Si\u27e9+ d(minSi \u2212maxSi)\n+ \u03bb(1\u2212 \u27e8Pi, exp(Si)\u27e9) + \u27e8u,maxSi \u2212 Si\u27e9 + \u27e8v, Si \u2212minSi\u27e9.\nThen, the KKT conditions are:\n\u2202L\n\u2202Si(x) = [Qi(x)\u2212 u(x) + v(x)]\u2212 \u03bbPi(x) exp(Si(x)) = 0,\n\u2202L\n\u2202maxSi = \u2212d+ \u2211 x\u2208\u03a3 u(x) = 0,\n\u2202L\n\u2202minSi = d\u2212 \u2211 x\u2208\u03a3 v(x) = 0,\n\u03bb(1\u2212 \u27e8Pi, exp(Si)\u27e9) = 0, \u27e8u,maxSi \u2212 Si\u27e9 = 0, \u27e8v, Si \u2212minSi\u27e9 = 0.\nWe can solve for the value of \u03bb:\u2211 x\u2208\u03a3 \u2202L \u2202Si(x) = [1\u2212 d+ d]\u2212 \u03bb \u2211 x\u2208\u03a3 Pi(x) exp(Si(x)) = 0.\nNote that \u03bb cannot be 0, so the fourth KKT condition implies \u27e8Pi, exp(Si)\u27e9 = 1. Consequently, the above equation implies \u03bb = 1.\nThe final solution is given by:\nSi(x) = log Qi(x)\u2212 u(x) + v(x)\nPi(x) ,\nu(x) \u0338= 0 iff Si(x) = max x Si(x),\nv(x) \u0338= 0 iff Si(x) = min x Si(x),\u2211 x\u2208\u03a3 u(x) = \u2211 x\u2208\u03a3 v(x) = d."
        },
        {
            "heading": "B.5.2 COMPUTING THE SOLUTION",
            "text": "Let\nXmax = {x \u2208 \u03a3 | Si(x) = max x Si(x)},\nXmin = {x \u2208 \u03a3 | Si(x) = min x Si(x)}.\nIf x /\u2208 Xmax \u222aXmin, then we have\nSi(x) = log Qi(x)\nPi(x) .\nIf x \u2208 Xmax, then we have\nmax x\nSi(x) = Si(x) = log Qi(x)\u2212 u(x) + v(x)\nPi(x) .\nSumming over all x \u2208 Xmax, and noting that \u2211\nx\u2208Xmax u(x) = d, we obtain:\nmax x Si(x) = log\n\u2211 x\u2208Xmax Qi(x)\u2212 d+ \u2211 x\u2208Xmax v(x)\u2211\nx\u2208Xmax Pi(x) .\nSimilarly,\nmin x Si(x) = log\n\u2211 x\u2208Xmin Qi(x)\u2212 \u2211 x\u2208Xmin u(x) + d\u2211\nx\u2208Xmin Pi(x) .\nWhen \u2211\nx\u2208Xmin u(x) \u0338= 0, it implies that there exists an x \u2208 Xmin such that x \u2208 Xmax, which in turn implies that maxx Si(x) = Si(x) = minx Si(x). In this case, the score is trivial, with Si(x) = 0 for all x \u2208 \u03a3. Thus, the computation of the maximin solution reduces to finding Xmax and Xmin, which can be computed in O\u0303(|\u03a3|) time. A pseudocode is shown in Algorithm 2. Note that the provided pseudocode is not a real implementation but serves as a schematic representation of the algorithm. In our experimental implementation, we took into consideration the effective precision of computer floating-point numbers. To ensure numerical stability and prevent NaNs, we implemented the algorithm in log space. This makes the algorithm more complex, and additionally, we designed the algorithm with grid search by reusing previous computation results for acceleration. We also implemented such algorithm with tensor operator for efficient computation on GPU. For more details, please refer to the source code.\nAlgorithm 2 Computation of maximin variant of LLR score\nimport numpy as np\ndef get_max_lr(P: np.ndarray, Q: np.ndarray, d: float) -> float: \"\"\"Get $\\max_x \\exp(S(x))$\"\"\" indexes = sorted(range(len(P)), key=lambda i: Q[i] / P[i], reverse=True)\nsum_Q = 0.0 sum_P = 0.0\ndef _lr(): nonlocal sum_Q, sum_P if sum_Q <= d:\nreturn 0.0 else:\nreturn (sum_Q - d) / sum_P\nlr = _lr()\nfor i in indexes: if Q[i] / P[i] < lr:\nbreak sum_Q += Q[i] sum_P += P[i] lr = _lr()\nreturn lr\ndef get_min_lr(P: np.ndarray, Q: np.ndarray, d: float) -> float: \"\"\"Get $\\min_x \\exp(S(x))$\"\"\" indexes = sorted(range(len(P)), key=lambda i: Q[i] / P[i])\nsum_Q = 0.0 sum_P = 0.0\ndef _lr(): nonlocal sum_Q, sum_P return (sum_Q + d) / sum_P\nlr = _lr()\nfor i in indexes: if Q[i] / P[i] > lr:\nbreak sum_Q += Q[i] sum_P += P[i] lr = _lr()\nreturn lr\ndef get_S(P: np.ndarray, Q: np.ndarray, d: float) -> np.ndarray: max_lr = get_max_lr(P, Q, d) min_lr = get_min_lr(P, Q, d) lr = Q / P if max_lr <= min_lr:\nreturn np.zeros_like(p) return np.log(np.clip(lr, min_lr, max_lr))"
        },
        {
            "heading": "C ADDITIONAL DISCUSSION",
            "text": "Performance without context code history Despite that \u201ccontext code history\u201d is necessary to ensure n-shot-undetectable, it\u2019s possible to bypass this requirement, and always execute steps 9 and 10 in Algorithm 1. In many instances, this won\u2019t significantly degrade the performance of downstream tasks, as the probability of context code collision is low. However, if one chooses to neglect the context code history, they effectively waive the theoretical guarantee of n-shot-undetectability\nand potentially expose themselves to corner cases that could notably undermine the task performance. Moreover, users could specifically construct test cases that check for the existence of watermarks. For instance, prompts like \u201dGenerate a random bit (0 or 1):\u201d or \u201dGenerate a random bit sequence, with five dots between every two digits:\u201d would yield incorrect results in the absence of context code history.\nComputation of logits during detection The watermark detection methods in Sections 5.2 and 5.3 relies on the output probability distribution PM . Ideally, the PM used during detection should be the same as the one during generation. However, this may not always be possible. Language model logits depend on various parameters like the prompt, the temperature and sampling policy used during generation, etc., which might not be accessible during watermark detection. For instance, PM depends on the prompt, but during detection, we might only have the text to be examined and not the prompt from which it was generated.\nIn such circumstances, we can only resort to using another distribution P \u2032M as an estimation of PM . For instance, if the prompt is missing during detection, we can set the prompt to an empty string and then calculate the language model probabilities. In a machine translation task, one could translate the output back to the input language and use that as input. In practice, there\u2019s likely to be a disparity between P \u2032M and PM , which could lead to a drop in score. We discuss in detail how the score is affected by changes in logits in Appendix F.2.\nCost of likelihood computation The detection methods in Sections 5.2 and 5.3 require the output probability distribution PM . This comes at a computational cost: it\u2019s more computationally expensive than red list-based methods proposed by Kirchenbauer et al. (2023), as it involves a language model. However, the cost is much less than a generation, as it only requires a single forward pass.\nOn the other hand, our framework also supports likelihood-agnostic detection methods, which have their own pros and cons. We present a detailed comparison of likelihood-based and likelihoodagnostic methods and provide an example in Appendix D.\nPerturbation of P The method in Section 5.3 introduces a variation of the log likelihood ratio test where the watermarked distribution PM,w is perturbed, resulting in a new optimization problem. Similarly, we could introduce a perturbation to the original distribution PM . Specifically, we would adjust the original constraint of \u27e8Pi, exp(Si)\u27e9 \u2264 1 to be \u27e8P \u2032i , exp(Si)\u27e9 \u2264 1,\u2200P \u2032i , s.t.TV (Pi, P \u2032i ) \u2264 d\u2032, where TV (Pi, P \u2032i ) denotes the total variation distance between Pi and P \u2032 i and d\n\u2032 is a small positive number.\nThis new optimization problem can be solved using similar methods as those in Appendix B.5.2. We have implemented this computation in our codebase. However, for the experiments in this paper, we only used the case where d\u2032 = 0."
        },
        {
            "heading": "D LIKELIHOOD-AGNOSTIC WATERMARK SCORE",
            "text": "Our unbiased watermark can also be detected in a likelihood-agnostic way such that it does not rely on a language model and its output logits to compute the score."
        },
        {
            "heading": "D.1 METHOD",
            "text": ""
        },
        {
            "heading": "D.1.1 REWEIGHTING FUNCTION",
            "text": "We use the same \u03b4-reweighting as in Section 4.1.2, but with a different implementation. Instead of using inverse sampling, we can also use Gumbel trick. Specifically, each watermark code is a list of |\u03a3| number of independent and identically distributed standard Gumbel variables. The watermark code space is E = R\u03a3. The probability density function of the watermark code is given by PE(E) = \u220f a\u2208\u03a3 e \u2212E(a)+eE(a) .\nTo sample a token using the Gumbel trick, we compute a\u2217 = argmaxa{logP (a) + E(a)}, and the reweighted distribution becomes Q = \u03b4a\u2217 . Gumbel variables allow us to guess the likelihood of a token coming from the watermark model without relying on logits, as tokens with larger Gumbel variables are more likely to be picked by the watermark model."
        },
        {
            "heading": "D.1.2 SCORE DESIGN AND TAIL BOUND",
            "text": "Similar to Section 5, we calculate scores for each token, but without relying on the original and reweighted distribution P and Q. Thus, the design of the likelihood-agnostic score has a certain degree of arbitrariness, unlike the method in Sections 5.2 and 5.3 which was derived in a principled way.\nWe choose the score to be si = ln 2\u2212 exp(\u2212E(a\u2217)). One of the main concerns of this construction is that it can yield a tail bound similar to Theorem 8.\nTheorem 16. For n independent random variables Gi \u223c Gumbel(0, 1), if we define si = ln 2 \u2212 exp(\u2212Gi), we have E[exp(si)] \u2264 1 and P ( \u2211n i=1 si \u2264 t) \u2264 e\u2212t.\nFor a token with watermark, the average score is E[ln 2\u2212 exp(\u2212Gi(a\u2217))] = ln 2\u2212 \u2211 a\u2208\u03a3 P (a) 2 = ln 2\u2212 exp(\u2212H2(P )), where H2(P ) is the Re\u0301nyi entropy of order 2. Therefore, the average score is positive only when the entropy is high.\nNote that Theorem 16 requires independence of si, unlike Theorem 8 where the si can be a random process. In practice, the Gumbel variables depend on the watermark code, and the watermark code might repeat, leading to dependencies between Gumbel variables and thus between scores. To address this issue, for repeating context codes, we set the score to zero, ensuring that Theorem 16 remains applicable.\nThe detection process is as follows: given a text x1:n = (x1, . . . , xn), we obtain a series of context codes (cc1, . . . , ccn) and watermark codes (E1, . . . , En). The final scores are computed as\nsi = { ln 2\u2212 exp(\u2212Ei(xi)) if cci /\u2208 cc1, . . . , cci\u22121, 0 if cci \u2208 cc1, . . . , cci\u22121."
        },
        {
            "heading": "D.2 COMPARISON BETWEEN LIKELIHOOD-BASED SCORE AND LIKELIHOOD-AGNOSTIC SCORE",
            "text": "Compared to the likelihood-based score, the likelihood-agnostic score has some notable drawbacks.\nAs it does not rely on logits, it cannot distinguish between high and low entropy situations. In low entropy cases, the likelihood-agnostic score still tends to have a large absolute value, even though it does not provide any signal and only contributes noise, lowering the score. In extreme cases, when the entropy is zero, the generation result is deterministic, and the ideal detection algorithm should output a zero score, as there is no evidence for or against the presence of the watermark. However, the likelihood-agnostic score would output a negative average score, giving a false indication that the text was not generated by a model with watermark.\nMoreover, in cases where the original distribution PM is known, the likelihood-agnostic score is much smaller than the log likelihood ratio based score. According to the Neyman-Pearson lemma, the log likelihood ratio test is the most powerful statistical test, and its maximin variant also retains this property to a certain degree, thus providing a higher score than likelihood-agnostic score.\nOn the other hand, the likelihood-agnostic score has a lower computational cost, as it does not depend on the logits computed by a large language model. Furthermore, the fact that likelihoodagnostic score is independent of logits from the language model makes it more appealing when the original distribution PM is hard to estimate during detection."
        },
        {
            "heading": "E DETAILED EXPERIMENT SETUP",
            "text": "We evaluate the performance of our Unbiased Watermarks on two important applications of seq2seq models: text summarization(TS) and machine translation(MT).\nText summarization. In the TS task, we adopt the test set of of CNN-DM (Hermann et al., 2015) corpus, which consists of 11,490 examples. The model applied is BART-large, which contains 400 million parameters.\nMachine translation. For the MT task, we employ the WMT\u201914 English (En) to Romanian (Ro) dataset, which has a test set size of 1,999 examples. The Multilingual Bart (MBart) (Liu et al., 2020) model and its official tokenizer is applied.\nWatermark setup. We evaluate two reweighting functions in our experiment: \u03b4-reweight and \u03b3reweight. For context code generation, we employ the most recent five tokens as context code. For example, if the current input to the decoder is (x1, x2, x3), the context code used in generating x4 would be (x1, x2, x3), considering only three tokens are available. Context code history is reset before generating each batch, thereby making our method b-shot-undetectable given a batch size of b. For the unbiased watermark code generation function, we use SHA-256 as the hash function and a 1024-bit random bitstring as the key k. The watermark code E is sampled from PE using hash(c, k) as the random seed.\nIn addition, we compared our method with the soft-red-list watermarking method from Kirchenbauer et al. (2023). Their method depends on two parameters \u03b4, controlling the size of the change in logits, and \u03b3, which is the proportion of the green list in the total vocabulary. We test \u03b4 with three values: 0.0, 1.0, 2.0, and fix \u03b3 to be 12 . It is important to clarify that the \u03b4 and \u03b3 in our \u03b4-reweight and \u03b3-reweight are different from those in Kirchenbauer et al.\u2019s method. In the latter, \u03b4 and \u03b3 are hyperparameters, while in our method, \u03b4-reweight and \u03b3-reweight are names of two reweighting strategies.\nWatermark detection. We employ the maximin variant of LLR score for watermark detection. The score depends on a perturbation strength d and is optimized by performing a grid search over the set {0, 0.1, . . . , 0.9, 1.0}, which consists of 11 points. The optimal perturbation strength is the one that yields the highest score sum.\nEvaluation metrics. For the TS task, we employ the ROUGE score (Lin, 2004), which measures the overlap in terms of n-grams to assess the effectiveness of the summary in capturing the essential content from the reference summaries. For the MT task, we use the BLEU score (Papineni et al., 2002) that emphasizes the lexical similarity between the machine-generated translations and the human reference translations. We estimated the distribution and standard error of BLEU score based on bootstrapping. In both tasks, we also apply BERTScore and Perplexity as auxiliary metrics.\nComputational costs. Our experiments are carried out on a machine equipped with 2x AMD EPYC 7513 32-Core Processor and 8x A6000 GPUs. All experiments can be completed within 4 hours.\nImplementation. The experiments are implemented based on the Huggingface library (Wolf et al., 2019), a popular platform for developing and sharing models in the NLP community."
        },
        {
            "heading": "F MORE EXPERIMENT",
            "text": ""
        },
        {
            "heading": "F.1 ADDING WATERMARK",
            "text": "Tables 4 and 5 shows more result under the same setup as Table 1.\nGPTScore (Fu et al., 2023) is an LLM based auto evaluator. We utilize text-curie-001 for our evaluations."
        },
        {
            "heading": "F.2 SENSITIVITY OF SCORES",
            "text": "The detection methods in Sections 5.2 and 5.3 rely on the output logits of the language models, which in turn depend on various factors such as the prompt, the temperature and sampling policy used during the generation process, and the language model itself. In this section, we measure the sensitivity of the scores to changes in these parameters.\nWatermarked samples are generated from the distribution PM,w, which comes from reweighting of the original distribution PM . However, during detection, we modify some parameters, including temperature, sampling policy (top k), input, and model, resulting in a new probability distribution P \u2032M .\nThe following table demonstrates the decrease in scores under different changes, showing that when P \u2032M is not equal to PM , the scores decline. This implies that more tokens are required to accumulate sufficient evidence to prove the existence of the watermark.\nComparing the two reweight functions, we find that when P \u2032M is equal to PM , the \u03b4-reweight always yields a higher score than the \u03b3-reweight. However, when P \u2032M is different from PM , the scores obtained from the \u03b4-reweight exhibit a significant drop, whereas the decline in scores for the \u03b3reweight is always more gradual than that of the \u03b4-reweight. This indicates that the \u03b3-reweight is less sensitive to the differences between P \u2032M and PM ."
        },
        {
            "heading": "F.3 LIKELIHOOD-AGNOSTIC SCORE",
            "text": "When applied to text summarization, which is a task with relatively high entropy, the likelihoodagnostic score is positive on average but an order of magnitude lower than the likelihood-based score. For machine translation, which is a low entropy task, the average score is negative, and thus cannot be used to detect watermark in this case.\nF.4 VERIFYING DOWNSTREAM-INVARIANT PROPERTY OF WATERMARK FOR MORE MODELS"
        },
        {
            "heading": "F.5 ROBUSTNESS OF WATERMARKS",
            "text": "In this section, we aim to evaluate the robustness of watermarking methods. To perform this assessment, we first initialize 512 string prompts for open-ended text completion. For each of these prompt, we use certain watermark method to generate 16 tokens sequentially. These generated strings are modified and then analyzed to detect the presence of watermarks.\nIn order to test the resilience of the watermarks against noise and alterations, we introduce random perturbation to generated text by replacing a \u03b5 portion of the tokens with random tokens. We start our experiment with \u03b5 = 0.0, indicating no perturbation to the original strings, and gradually increase it to \u03b5 = 0.5, where half of the tokens in each string are replaced with random tokens.\nTo quantify the robustness of the watermarks, we calculate a corresponding score for each level of perturbation and measure the Area Under the Curve (AUC). For unbiased watermark methods, the score is calculated using the method described in section Section 5.3. For soft red list methods, we employ the z-score as defined in Kirchenbauer et al. (2023)."
        },
        {
            "heading": "G LIMITATIONS",
            "text": ""
        },
        {
            "heading": "G.1 MAJOR LIMITATIONS",
            "text": "We note that our unbiased watermarking technique only works for generative processes with high entropy. In an extreme case, when entropy is 0 and output of the original model is fixed, any unbiased watermarking method will always yield the same result as the original model. As a result, it is challenging to integrate our unbiased watermarking approach with beam search algorithms due to their intrinsic deterministic nature."
        },
        {
            "heading": "G.2 MINOR LIMITATIONS",
            "text": "\u2022 Since our study is focused on unbiasedness, rather than robustness of watermark method, we only test the robustness of the watermark for a single attacks, that is the random substitution attack. There are numerous ways of watermark removal ranging from simple text insertion to more sophisticated methods like paraphrasing attacks. These attacks have their own implication on watermark robustness, but this topics is beyond the scope of this paper.\n\u2022 Even though we have proposed a watermarking framework, there is considerable design space left unexplored. Many reweighting functions and context codes may be applicable, but it is unclear which one is optimal in practice, particularly since we currently lack standard evaluation metrics. We expect that continued research in this area could possibly shed more light on this subject.\n\u2022 In Algorithm 1, the introduction of context code history strictly ensures n-shot-undetectable watermarking at the expense of additional storage requirements, as the context code history from past generation processes needs to be retained. This presents a trade-off between storage and undetectability. For instance, if we store all context codes in the previous n generated outputs, we can ensure n-shot-undetectability. However, the greater the value of n, the larger the required storage space, though this does provide stronger undetectability. Generally, storage complexity increases with O(n)."
        },
        {
            "heading": "H BROADER IMPACTS",
            "text": "Our unbiased watermark has removed major hurdles for large-scale application of watermarks. The two primary obstacles previously were the potential for watermarks to degrade the quality of output and the possibility for users to discern the presence of watermarks. Our method addresses both of these issues thoroughly.\nH.1 IMPACT ANALYSIS\nTraceability and accountability Traceability refers to the ability to trace back the origin of a text. Any watermarking method, including method in this paper, contribute to traceability. In an era of misinformation and disinformation, this allows for holding providers accountable for the content generated by their models.\nIdentifying model-generated texts Watermarking method can be used to distinguish which texts are generated by the models. This prevents unnecessary training on the data generated by the models themselves.\nOwnership Watermarking method can help provide evidence in situations where a provider claims ownership over a generated text (Sun et al., 2023).\nData privacy concerns The use of different watermarks, if applied discretionarily, could potentially link generated text back to a specific user or request. This could be seen as a breach of users\u2019 privacy, raising important data privacy concerns.\nManipulation and removal of watermarks The ongoing development of techniques to manipulate or remove watermarks could lead to an \u201carms race\u201d between providers attempting to secure their watermarks and users trying to remove them."
        },
        {
            "heading": "H.2 ETHICAL CONSIDERATIONS",
            "text": "There are several ethical considerations in the pursuit of watermarking technology.\nConsent Users have the right to be informed about the use of watermarks and should have the option to opt-out.\nTransparency Providers should be transparent about the use of watermarks, including information on what is embedded within these watermarks and how it\u2019s used. If the watermarks contain identifying information, providers should clearly state who can access this information and take appropriate measures to prevent potential misuse.\nFair use The application of our watermarking technique should not interfere with the legitimate use of the service by users.\nOur watermarking method does not degrade the quality of the output, ensuring the values of fair use are upheld. However, it also introduces a potentially challenging issue.\nDue to the undetectable nature of our technique, every user might have to assume that the service they are using has been watermarked, as it cannot be disproved. This raises challenging questions on how to ensure consent and transparency."
        },
        {
            "heading": "H.3 CONCLUSION",
            "text": "Our unbiased watermarking method brings improved traceability and attribution and ensures that fair use is not compromised. However, it also poses significant challenges in data privacy, transparency, and consent. Any implementation of this system needs to be done thoughtfully and ethically, with clear communication to users about how it works and what it means for them."
        }
    ],
    "year": 2023
}