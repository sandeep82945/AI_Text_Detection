{
    "abstractText": "Recently, using large pre-trained Transformer models for transfer learning tasks has evolved to the point where they have become one of the flagship trends in the Natural Language Processing (NLP) community, giving rise to various outlooks such as prompt-based, adapters, or combinations with unsupervised approaches, among many others. In this work, we propose a 3-Phase technique to adjust a base model for a classification task. First, we adapt the model\u2019s signal to the data distribution by performing further training with a Denoising Autoencoder (DAE). Second, we adjust the representation space of the output to the corresponding classes by clustering through a Contrastive Learning (CL) method. In addition, we introduce a new data augmentation approach for Supervised Contrastive Learning to correct the unbalanced datasets. Third, we apply fine-tuning to delimit the predefined categories. These different phases provide relevant and complementary knowledge to the model to learn the final task. We supply extensive experimental results on several datasets to demonstrate these claims. Moreover, we include an ablation study and compare the proposed method against other ways of combining these techniques.",
    "authors": [
        {
            "affiliations": [],
            "name": "Alejo L\u00f3pez-\u00c1vila"
        },
        {
            "affiliations": [],
            "name": "Huawei London"
        },
        {
            "affiliations": [],
            "name": "V\u00edctor Su\u00e1rez-Paniagua"
        }
    ],
    "id": "SP:08c01d81042ec8ac7b09e6b4df4ccb8b587f9bb5",
    "references": [
        {
            "authors": [
                "Aditya Ramesh",
                "Daniel Ziegler",
                "Jeffrey Wu",
                "Clemens Winter",
                "Dario Amodei"
            ],
            "title": "Language models are few-shot learners",
            "year": 2020
        },
        {
            "authors": [
                "S. Chopra",
                "R. Hadsell",
                "Y. LeCun."
            ],
            "title": "Learning a similarity metric discriminatively, with application to face verification",
            "venue": "2005 IEEE Computer Society Conference on Computer Vision and Pattern Recognition (CVPR\u201905), volume 1, pages 539\u2013546 vol. 1.",
            "year": 2005
        },
        {
            "authors": [
                "Alexis Conneau",
                "Douwe Kiela."
            ],
            "title": "SentEval: An evaluation toolkit for universal sentence representations",
            "venue": "Proceedings of the Eleventh International Conference on Language Resources and Evaluation (LREC 2018), Miyazaki, Japan. European Language",
            "year": 2018
        },
        {
            "authors": [
                "Alice Coucke",
                "Alaa Saade",
                "Adrien Ball",
                "Th\u00e9odore Bluche",
                "Alexandre Caulier",
                "David Leroy",
                "Cl\u00e9ment Doumouro",
                "Thibault Gisselbrecht",
                "Francesco Caltagirone",
                "Thibaut Lavril",
                "Ma\u00ebl Primet",
                "Joseph Dureau"
            ],
            "title": "Snips voice platform: an embedded",
            "year": 2018
        },
        {
            "authors": [
                "Jacob Devlin",
                "Ming-Wei Chang",
                "Kenton Lee",
                "Kristina Toutanova"
            ],
            "title": "Bert: Pre-training of deep bidirectional transformers for language understanding",
            "year": 2018
        },
        {
            "authors": [
                "Chelsea Finn",
                "Pieter Abbeel",
                "Sergey Levine."
            ],
            "title": "Model-agnostic meta-learning for fast adaptation of deep networks",
            "venue": "Proceedings of the 34th International Conference on Machine Learning, volume 70 of Proceedings of Machine Learning Research, pages",
            "year": 2017
        },
        {
            "authors": [
                "Tianyu Gao",
                "Xingcheng Yao",
                "Danqi Chen."
            ],
            "title": "SimCSE: Simple contrastive learning of sentence embeddings",
            "venue": "Proceedings of the 2021 Conference on Empirical Methods in Natural Language Processing, pages 6894\u20136910, Online and Punta Cana, Do-",
            "year": 2021
        },
        {
            "authors": [
                "Mathieu Germain",
                "Karol Gregor",
                "Iain Murray",
                "Hugo Larochelle."
            ],
            "title": "Made: Masked autoencoder for distribution estimation",
            "venue": "Proceedings of the 32nd International Conference on International Conference on Machine Learning - Volume 37, ICML\u201915,",
            "year": 2015
        },
        {
            "authors": [
                "Michael Gutmann",
                "Aapo Hyv\u00e4rinen."
            ],
            "title": "Noisecontrastive estimation: A new estimation principle for unnormalized statistical models",
            "venue": "Proceedings of the Thirteenth International Conference on Artificial Intelligence and Statistics, volume 9 of Proceed-",
            "year": 2010
        },
        {
            "authors": [
                "Fabian Karl",
                "Ansgar Scherp"
            ],
            "title": "2022. Transformers are short text classifiers: A study of inductive short text classifiers on benchmarks and real-world datasets",
            "year": 2022
        },
        {
            "authors": [
                "Prannay Khosla",
                "Piotr Teterwak",
                "Chen Wang",
                "Aaron Sarna",
                "Yonglong Tian",
                "Phillip Isola",
                "Aaron Maschinot",
                "Ce Liu",
                "Dilip Krishnan."
            ],
            "title": "Supervised Contrastive Learning",
            "venue": "arXiv e-prints, page arXiv:2004.11362.",
            "year": 2020
        },
        {
            "authors": [
                "Mark A. Kramer."
            ],
            "title": "Nonlinear principal component analysis using autoassociative neural networks",
            "venue": "Aiche Journal, 37:233\u2013243.",
            "year": 1991
        },
        {
            "authors": [
                "Ruizhe Li",
                "Xiao Li",
                "Chenghua Lin",
                "Matthew Collinson",
                "Rui Mao."
            ],
            "title": "A stable variational autoencoder for text modelling",
            "venue": "Proceedings of the 12th International Conference on Natural Language Generation, pages 594\u2013599, Tokyo, Japan. Association",
            "year": 2019
        },
        {
            "authors": [
                "Yinhan Liu",
                "Myle Ott",
                "Naman Goyal",
                "Jingfei Du",
                "Mandar Joshi",
                "Danqi Chen",
                "Omer Levy",
                "Mike Lewis",
                "Luke Zettlemoyer",
                "Veselin Stoyanov."
            ],
            "title": "Roberta: A robustly optimized bert pretraining approach",
            "venue": "ArXiv, abs/1907.11692.",
            "year": 2019
        },
        {
            "authors": [
                "Andrew L. Maas",
                "Raymond E. Daly",
                "Peter T. Pham",
                "Dan Huang",
                "Andrew Y. Ng",
                "Christopher Potts."
            ],
            "title": "Learning word vectors for sentiment analysis",
            "venue": "Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics: Human",
            "year": 2011
        },
        {
            "authors": [
                "Yishu Miao",
                "Lei Yu",
                "Phil Blunsom"
            ],
            "title": "Neural variational inference for text processing",
            "year": 2015
        },
        {
            "authors": [
                "Nguyen Minh Phuong",
                "Tung Le",
                "Nguyen Le Minh."
            ],
            "title": "Cae: Mechanism to diminish the class imbalanced in slu slot filling task",
            "venue": "Advances in Computational Collective Intelligence, pages 150\u2013163, Cham. Springer International Publishing.",
            "year": 2022
        },
        {
            "authors": [
                "Libo Qin",
                "Wanxiang Che",
                "Yangming Li",
                "Haoyang Wen",
                "Ting Liu."
            ],
            "title": "A stack-propagation framework with token-level intent detection for spoken language understanding",
            "venue": "pages 2078\u20132087.",
            "year": 2019
        },
        {
            "authors": [
                "Nils Reimers",
                "Iryna Gurevych"
            ],
            "title": "Sentence-bert: Sentence embeddings using siamese bert-networks",
            "year": 2019
        },
        {
            "authors": [
                "Nikolay Savinov",
                "Junyoung Chung",
                "Mikolaj Binkowski",
                "Erich Elsen",
                "Aaron van den Oord"
            ],
            "title": "Stepunrolled denoising autoencoders for text generation",
            "year": 2021
        },
        {
            "authors": [
                "Florian Schroff",
                "Dmitry Kalenichenko",
                "James Philbin."
            ],
            "title": "Facenet: A unified embedding for face recognition and clustering",
            "venue": "2015 IEEE Conference on Computer Vision and Pattern Recognition (CVPR), pages 815\u2013823.",
            "year": 2015
        },
        {
            "authors": [
                "Varun Thumbe Siddhant Garg",
                "Goutham Ramakrishnan."
            ],
            "title": "Towards robustness to label noise in text classification via noise modeling",
            "venue": "arXiv preprint arXiv:2101.11214v3.",
            "year": 2021
        },
        {
            "authors": [
                "Richard Socher",
                "Alex Perelygin",
                "Jean Wu",
                "Jason Chuang",
                "Christopher D. Manning",
                "Andrew Ng",
                "Christopher Potts."
            ],
            "title": "Recursive deep models for semantic compositionality over a sentiment treebank",
            "venue": "Proceedings of the 2013 Conference on Empiri-",
            "year": 2013
        },
        {
            "authors": [
                "Kihyuk Sohn."
            ],
            "title": "Improved deep metric learning with multi-class n-pair loss objective",
            "venue": "Advances in Neural Information Processing Systems, volume 29. Curran Associates, Inc.",
            "year": 2016
        },
        {
            "authors": [
                "Chi Sun",
                "Xipeng Qiu",
                "Yige Xu",
                "Xuanjing Huang"
            ],
            "title": "2020a. How to fine-tune bert for text classification",
            "year": 2020
        },
        {
            "authors": [
                "Zijun Sun",
                "Chun Fan",
                "Qinghong Han",
                "Xiaofei Sun",
                "Yuxian Meng",
                "Fei Wu",
                "Jiwei Li"
            ],
            "title": "Selfexplaining structures improve nlp models",
            "year": 2020
        },
        {
            "authors": [
                "Pascal Vincent",
                "Hugo Larochelle",
                "Isabelle Lajoie",
                "Yoshua Bengio",
                "Pierre-Antoine Manzagol."
            ],
            "title": "Stacked denoising autoencoders: Learning useful representations in a deep network with a local denoising criterion",
            "venue": "J. Mach. Learn. Res., 11:3371\u20133408.",
            "year": 2010
        },
        {
            "authors": [
                "Kexin Wang",
                "Nils Reimers",
                "Iryna Gurevych"
            ],
            "title": "2021a. Tsdae: Using transformer-based sequential denoising auto-encoder for unsupervised sentence embedding learning",
            "year": 2021
        },
        {
            "authors": [
                "Sinong Wang",
                "Han Fang",
                "Madian Khabsa",
                "Hanzi Mao",
                "Hao Ma"
            ],
            "title": "2021b. Entailment as few-shot learner",
            "year": 2021
        },
        {
            "authors": [
                "Wenhui Wang",
                "Furu Wei",
                "Li Dong",
                "Hangbo Bao",
                "Nan Yang",
                "Ming Zhou."
            ],
            "title": "Minilm: Deep selfattention distillation for task-agnostic compression of pre-trained transformers",
            "venue": "NeurIPS 2020. ACM.",
            "year": 2020
        },
        {
            "authors": [
                "Jingqing Zhang",
                "Yao Zhao",
                "Mohammad Saleh",
                "Peter J. Liu"
            ],
            "title": "Pegasus: Pre-training with extracted gap-sentences for abstractive summarization",
            "year": 2020
        },
        {
            "authors": [
                "Xiang Zhang",
                "Junbo Jake Zhao",
                "Yann LeCun."
            ],
            "title": "Character-level convolutional networks for text classification",
            "venue": "NIPS.",
            "year": 2015
        }
    ],
    "sections": [
        {
            "heading": "1 Introduction",
            "text": "The never-ending starvation of pre-trained Transformer models has led to fine-tuning these models becoming the most common way to solve target tasks. A standard methodology uses a pre-trained model with self-supervised learning on large data as a base model. Then, replace/increase the deep layers to learn the task in a supervised way by leveraging knowledge from the initial base model. Even though specialised Transformers, such as Pegasus (Zhang et al., 2020) for summarisation, have appeared in recent years, the complexity and resources needed to train Transformer models of these scales make fine-tuning methods the most\nreasonable choice. This paradigm has raised interest in improving these techniques, either from the point of the architecture (Qin et al., 2019), by altering the definition of the fine-tuning task (Wang et al., 2021b) or the input itself (Brown et al., 2020), but also by revisiting and proposing different selfsupervised training practices (Gao et al., 2021). We decided to explore the latter and offer a novel approach that could be utilised broadly for NLP classification tasks. We combine some self-supervised methods with fine-tuning to prepare the base model for the data and the task. Thus, we will have a model adjusted to the data even before we start fine-tuning without needing to train a model from scratch, thus producing better results, as shown in the experiments.\nA typical way to adapt a neural network to the input distribution is based on Autoencoders. These systems introduce a bottleneck for the input data distribution through a reduced layer, a sparse layer activation, or a restrictive loss, forcing the model to reduce a sample\u2019s representation at the narrowing. A more robust variant of this architecture is DAE, which corrupts the input data to prevent it from learning the identity function. The first phase of the proposed method is a DAE (Fig. 1a), replacing the final layer of the encoder with one more adapted to the data distribution.\nContrastive Learning has attracted the attention of the NLP community in recent years. This family of approaches is based on comparing an anchor sample to negative and positive samples. There are several losses in CL, like the triplet loss (Schroff et al., 2015), the contrastive loss (Chopra et al., 2005), or the cosine similarity loss. The second phase proposed in this work consists of a Contrastive Learning using the cosine similarity (as shown in Fig. 1b). Since the data is labelled, we use a supervised approach similar to the one presented in (Khosla et al., 2020) but through Siamese Neural Networks. In contrast, we consider Contrastive\nLearning and fine-tuning the classifier (FT) as two distinct stages. We also add a new imbalance correction during data augmentation that avoids overfitting. This CL stage has a clustering impact since the vector representation belonging to the same class will tend to get closer during the training. We chose some benchmark datasets in classification tasks to support our claims. For the hierarchical ones, we can adjust labels based on the number of similar levels among samples.\nFinally, once we have adapted the model to the data distribution in the first phase and clustered the representations in the second, we apply fine-tuning at the very last. Among the different variants from fine-tuning, we use the traditional one for Natural language understanding (NLU), i.e., we add a small Feedforward Neural Network (FNN) as the classifier on top of the encoder with two layers. We use only the target task data without any auxiliary dataset, making our outlook self-contained. The source code is publicly available at GitHub1.\nTo summarise, our contribution is fourfold:\n1. We propose a 3-Phase fine-tuning approach to adapt a pre-trained base model to a supervised classification task, yielding more favourable results than classical fine-tuning.\n2. We propose an imbalance correction method by sampling noised examples during the augmentation, which supports the Contrastive Learning approach and produces better vector representations.\n3. We analyze possible ways of applying the described phases, including ablation and joint loss studies.\n4. We perform experiments on several wellknown datasets with different classification tasks to prove the effectiveness of our proposed methodology."
        },
        {
            "heading": "2 Related Work",
            "text": "One of the first implementations was presented in (Reimers and Gurevych, 2019), an application of Siamese Neural Networks using BERT (Devlin et al., 2018) to learn the similarity between sentences.\n1https://github.com/vsuarezpaniagua/3-phase_ finetuning\nAutoencoders were introduced in (Kramer, 1991) and have been a standard for self-supervised learning in Neural Networks since then. However, new modifications were created with the explosion of Deep Learning architectures, such as DAE (Vincent et al., 2010) and masked Autoencoders (Germain et al., 2015). The Variational Autoencoder (VAE) has been applied for NLP in (Miao et al., 2015) or (Li et al., 2019) with RNN networks or a DAE with Transformers in (Wang et al., 2021a). Transformers-based Sequential Denoising Auto-Encoder (Wang et al., 2021a) is an unsupervised method for encoding the sentence into a vector representation with limited or no labelled data, creating noise through an MLM task. The authors of that work evaluated their approach on the following three tasks: Information Retrieval, Re-Ranking, and Paraphrase Identification, showing an increase of up to 6.4 points compared with previous state-of-the-art approaches. In (Savinov et al., 2021), the authors employed a new Transformer architecture called Step-unrolled Denoising Autoencoders. In the present work, we will apply a DAE approach to some Transformer models and extend its application to sentence-based and more general classification tasks.\nThe first work published on Contrastive Learning was (Chopra et al., 2005). After that, several versions have been created, like the triplet net in Facenet (Schroff et al., 2015) for Computer Vision. The triplet-loss compares a given sample and randomly selected negative and positive samples making the distances larger and shorter, respectively. One alternative approach for creating positive pairs is slightly altering the original sample. This method was followed by improved losses such as N -pairLoss (Sohn, 2016) and the Noise Contrastive Estimation (NCE) (Gutmann and Hyv\u00e4rinen, 2010), extending the family of CL techniques. In recent years, further research has been done on applying these losses, e.g. by supervised methods such as (Khosla et al., 2020), which is the one that most closely resembles one in our second phase.\nSentence-BERT (Reimers and Gurevych, 2019) employs a Siamese Neural Network using BERT with a pooling layer to encode two sentences into a sentence embedding and measure their similarity score. Sentence-BERT was evaluated on Semantic Textual Similarity (STS) tasks and the SentEval toolkit (Conneau and Kiela, 2018), outperforming other embedding strategies in most tasks. In\nour particular case, we also use Siamese Networks within the CL options. Similar to this approach, the Simple Contrastive Sentence Embedding (Gao et al., 2021) is used to produce better embedding representations. This unlabelled data outlook uses two different representations from the same sample, simply adding the noise through the standard dropout. In addition, they tested it using entailment sentences as positive examples and contradiction sentences as negative examples and obtained better results than SBERT in the STS tasks.\nWhereas until a few years ago, models were trained for a target task, the emergence of pretrained Transformers has changed the picture. Most implementations apply transfer learning on a Transformer model previously pre-trained on general NLU, on one or more languages, to the particular datasets and for a predefined task.\nThis new paradigm has guided the search for the best practice in each of the trending areas such as prompting strategies (Brown et al., 2020), Few Shot Learning (Wang et al., 2021b), meta-learning (Finn et al., 2017), also some concrete tasks like Intent Detection (Qin et al., 2019), or noisy data (Siddhant Garg, 2021). Here, we present a taskagnostic approach, outperforming some competitive methods for their corresponding tasks. It should also be noted that our method benefits from\nusing mostly unlabelled data despite some little labelled data. In many state-of-the-art procedures, like (Sun et al., 2020a), other datasets than the target dataset are used during training. In our case, we use only the target dataset."
        },
        {
            "heading": "3 Model",
            "text": "In this section, we describe the different proposed phases: a Denoising Autoencoder that makes the inputs robust against noise, a Contrastive Learning approach to identify the similarities between different samples in the same class and the dissimilarities with the other class examples together with a novel imbalance correction, and finally, the traditional fine-tuning of the classification model. In the last part of the section, we describe another approach combining the first two phases into one loss.\n3.1 DAE: Denoising Autoencoder phase\nThe Denoising Autoencoder is the first of the proposed 3-Phase approach, shown in Fig. 1a. Like any other Autoencoder, this model consists of an encoder and a decoder, connected through a bottleneck. We use two Transformer models as encoders and decoders simultaneously: RoBERTa (Liu et al., 2019), and all-MiniLM -L12-v2 (Wang et al., 2020). The underlying idea is that the bottleneck represents the input according to the general\ndistribution of the whole dataset. A balance needs to be found between preventing the information from being memorised and having sufficient sensitivity to be reconstructed by the decoder, forcing the bottleneck to learn the general distribution. We add noise to the Autoencoder to prevent the bottleneck from memorising the data. We apply a Dropout on the input to represent the noise. Formally, for a sequence of tokens X = {x0, \u00b7 \u00b7 \u00b7 , xn} coming from a data distribution D, we define the loss as\nLDAE = ED[logP\u03b8(X|X\u0304)] (1)\nwhere X\u0304 is the sequence X after adding the noise. To support with an example, masking a token at the position i would produce X\u0304 = {x0, \u00b7 \u00b7 \u00b7 , xi\u22121, 0, xi+1, \u00b7 \u00b7 \u00b7 , xn}. The distribution of P\u03b8 in this Cross-Entropy loss corresponds to the composition of the decoder with the encoder. We consider the ratio of noise like another hyperparameter to tune. More details can be found in Appendix A.1, and the results section 5. Instead of applying the noise to the dataset and running a few epochs over it, we apply the noise on the fly, getting a very low probability of a repeated input.\nOnce the model has been trained, we extract the encoder and the bottleneck, resulting in DAE (Fig. 1a), which will be the encoder for the next\nstep. Each model\u2019s hidden size has been chosen as its bottleneck size (768 in the case of RoBERTa). The key point of the first phase is to adapt the embedding representation of the encoder to the target dataset distribution, i.e., this step shifts the distribution from the general distribution learned by the pre-trained Transformers encoder into one of the target datasets. It should be noted here that this stage is in no way related to the categories for qualification. The first phase was implemented using the SBERT library.2\n3.2 CL: Contrastive Learning phase The second stage will employ Contrastive Learning, more precisely, a Siamese architecture with cosine similarity loss. The contrastive techniques are based on comparing pairs of examples or anchorpositive-negative triplets. Usually, these methods have been applied from a semi-supervised point of view. We decided on a supervised outlook where the labels to train in a supervised manner are the categories for classification, i.e., we pick a random example. Then, we can get a negative input by sampling from the other categories or a positive one by sampling from the same category. We combine this process of creating pairs with the imbalance correction explained below to get pairs of vector outputs (u, v). Given two inputs v and u and a label labelu,v based on their class similarity.\nlabelu,v = { 1, if u and v are in the same class. 0, otherwise. (2) We use a straightforward extension for the hierarchical dataset (AGNews) by normalising these weights along the number of levels. In the case of two levels, we assign 1 for the case where all the labels match, 0.5 when only the first one matches, and 0 if none. After applying the encoder, we obtain u\u0304 and v\u0304. We define the loss over these outputs as the Mean Squared Error (MSE):\nLCL = ||labelu,v \u2212 CosineSim(u, v))||2 (3)\nWe apply this Contrastive Learning to the encoder DAE, i.e., the encoder and the bottleneck from the previous step. Again, we add an extra layer to this encoder model, producing our following final embedding. We denote this encoder after applying CL over DAE as DAECL (Fig. 1b). Similarly, we chose the hidden size per model as the\n2https://www.sbert.net/index.html\nembedding size. CL plays the role of soft clustering for the embedding representation of the text based on the different classes. This will make fine-tuning much easier as it will be effortless to distinguish representations from distinct classes. The second phase was also implemented through the SBERT library."
        },
        {
            "heading": "3.2.1 Imbalance correction",
            "text": "As mentioned in the previous section, we are using a Siamese network and creating the pairs in a supervised way. It is a common practice to augment the data before applying CL. In theory, we can make as many example combinations as possible. In the case of the Siamese models, we have a total of n! unique pair combinations that correspond to the potential number of pairs based on symmetry. Typically, data can be increased as much as one considers suitable. The problem is that one may fall short or overdo it and produce overfitting in the smaller categories. Our augmentation is based on two pillars. We start with correcting the imbalance in the dataset by selecting underrepresented classes in the dataset more times but without repeating pairs. Secondly, on the classes that have been increased, we apply noise on them to provide variants that are close but not the same to define more clearly the cluster to which they belong.\nWe balance the dataset by defining the number of examples that we are going to use per class based on the most significant class (where maxk is its size) and a range of ratios, from minratio the minimum and maxratio the maximum. These upper and lower bounds for the ratios are hyper-parameters, and we chose 4 and 1.5 as default values. Formally, the new ratio is defined by the function:\n(4)f(x) = log (maxk\nx\n) \u00d7 maxratio\nlogmaxk\nwhere x refers to the initial size of a given class. After adding a lower bound for the ratio, we get the final amount\nnewratiok = min ( min ratio , f(classk) ) (5a)\nnewclassk = newratiok \u00d7 classk (5b)\nfor k = 1, 2, \u00b7 \u00b7 \u00b7 ,K in a classification problem with K classes, where classk and newclassk are the cardinalities of the class k, before and after the resizing, respectively. As we can observe, the\nfunction 4 gives f(1) = maxratio for one example, so we will never get something bigger than the maximum. The shape of this function is similar to a negative log-likelihood, given a high ratio to the small classes and around the minimum for medium or bigger. A simple computation shows that the ratio 1 in function 4 is obtained at\n(6)x = max (maxratio\u22121)/maxratio k\nor max0.75k in our default case. We duplicate this balanced dataset and shuffle both to create the pairs. Since many combinations exist, we only take the unique ones without repeating pairs, broadly preserving the proportions. Even so, if just a few examples represent one class, the clustering process from CL can be affected by the augmentation because the border between them would be defined just for a few examples. To avoid this problem, we add a slight noise to the tokens when the text length is long enough. This noise consists of deleting some of the stop-words from the example. Usually, this noise was added to create positive samples and produced some distortion to the vector representation. Adding it twice, in the augmentation and the CL, would produce too much distortion. However, since we are using a supervised approach, this does not negatively affect the model, as shown in the ablation section 5."
        },
        {
            "heading": "3.3 FT: Fine-tuning phase",
            "text": "Our final stage is fine-tuning, obtained by employing DAECL as our base model (as indicated in Fig 1b). We add a two-layer MLP on top as a classifier. We tried both to freeze and not to freeze the previous neurons from DAECL.\nAs the final activation, we use Softmax, which is a sigmoid function for the binary cases. More formally, for K classes, softmax corresponds to\n\u03c3(zi) = ezi\u2211K j=1 e zj for i = 1, 2, . . . ,K (7)\nAs a loss function for the classification, we minimize the use of Cross-Entropy:\nLFT = \u2212 K\u2211 k=1 yk log(pk) (8)\nwhere pk is the predicted probability for the class k and yk for the target. For binary classification datasets this can be further expanded as\nLFT = \u2212(y log(p) + (1\u2212 y) log(1\u2212 p)) (9)"
        },
        {
            "heading": "3.3.1 Joint",
            "text": "We wanted to check if we could benefit more when combining losses, i.e. by creating a joint loss based on the first and the second loss, (1 and 3), respectively.\nLJoint = LDAE + LCL (10)\nThis training was obtained as a joint training of stages one and two. By adding the classification head, like in the previous section, for fine-tuning, we got the version we denote as Joint (see Table 3)."
        },
        {
            "heading": "4 Experimental Setup",
            "text": "The datasets for the experiments, the two base models used and the metrics employed are detailed below."
        },
        {
            "heading": "4.1 Datasets",
            "text": "We have chosen several well-known datasets to carry out the experiments:\n\u2022 Intent recognition on SNIPS (SNIPS Natural Language Understanding benchmark) (Coucke et al., 2018). For this dataset, we found different versions, the first one with just 327 examples and 10 categories. This one was obtained from the huggingface library3, which shows how this procedure performs on small datasets.\n\u2022 The second version for SNIPS from Kaggle4 containing more samples and split into 7 classes that we call SNIPS2 is the most common one.\n\u2022 The third one is commonly used for slot prediction (Qin et al., 2019), although here we only consider task intent recognition. We used SST2 and SST5 from (Socher et al., 2013) for classification containing many short text examples.\n\u2022 We add AGNews5 (Zhang et al., 2015) to our list, a medium size dataset that shows our method over long text.\n\u2022 We complement the experiments with IMDB6 (Maas et al., 2011), a big dataset\n3https://huggingface.co/datasets/snips_built_ in_intents\n4https://www.kaggle.com/datasets/weipengfei/ atis-snips\n5https://huggingface.co/datasets/gimmaru/ag_ news\n6https://huggingface.co/datasets/imdb\nwith long inputs for binary classification in sentiment analysis. The length and size of this data made us consider only the RoBERTa as the base model.\nWe used Hugging Face API to download all the datasets apart from the second version of SNIPS. In some cases, there was no validation dataset, so we used 20% of the training set to create the validation dataset. There was an unlabelled test set in SNIPS, so we extracted another 10% for testing. The unlabelled data was used for the first training phase, not for the other ones. The first and second phases did not use the test set. We selected the best model for each of them based on the results of the validation dataset. The test set was used at the end of phase 3."
        },
        {
            "heading": "4.2 Models and Training",
            "text": "We carried out experiments with two different models, a small model for short text all-MiniLM - L12-v2 (Wang et al., 2020)7, more concretely, a version fine-tuned for sentence similarity and a medium size model RoBERTa-base (Liu et al., 2019)8 which we abbreviate as RoBERTa. The ranges for the hyper-parameters below, as well as the values of the best accuracy, can be found in Appendix A.1.\nWe use Adam as the optimiser. We test different combinations of hyper-parameters, subject to the model size. We tried batch sizes from 2 to 128, whenever possible, based on the dataset and the base model. We tested the encoder with both frozen and not frozen weights - almost always getting better results when no freezing is in place. We tested two different truncations\u2019 lengths based either on the maximum length in the training dataset plus a 20% or the default maximum length for the inputs in the base model. We tried to give more importance to one phase over the other by applying data augmentation in CL or extending the number of epochs for the Autoencoder (Appendix A.1). We increased the relevance of the first phase by augmenting the data before applying random noise instead of changing the number of epochs. We tune the value of ratio, getting 0.6 as the most common best value. To increase the relevance of the second phase, we increased the number of inputs by creating more pair combinations. Since we increased\n7https://huggingface.co/sentence-transformers/ all-MiniLM-L12-v2\n8https://huggingface.co/roberta-base\nor decreased the relevance of one or other phases based on the amount of data, we used the same learning rate for the first two phases."
        },
        {
            "heading": "4.3 Metrics",
            "text": "We conducted experiments using the datasets previously presented in Section 4.1. We used the standard macro metrics for classification tasks, i.e., Accuracy, F1-score, Precision, Recall, and the confusion matrix. We present only the results from Accuracy in the main table to compare against other works. The results for other metrics can be found in Appendix A.2."
        },
        {
            "heading": "5 Results",
            "text": "We assess the performance of the three methods against the several prominent publicly available datasets. Thus, here we evaluate the 3-Phase procedure compared to Joint and FT approaches. We report the performance of these approaches in terms of accuracy in Table 3\nWe observe a noticeable improvement of at least 1% with 3-Phase as compared to the second best performing approach, Joint, in almost all the datasets. In SNIPS2 with all-MiniLM - L12-v2 we get the same values, while in IMDB with RoBERTa we get a gap of 4 point and 8 for\nthe SNIPS dataset with all-MiniLM -L12-v2. We apply these three implementations to both base models, except IMDB, as the input length is too long for all-MiniLM -L12-v2. FT method on its own performs the worst concerning the other two counterparts for both the models tested. Eventually, we may conclude that the 3-Phase approach is generally the best one, followed by Joint, and as expected, FT provides the worst. We can also observe that Joint and FT tend to be close in datasets with short input, while AGNews gets closer results for 3-Phase and Joint.\nWe did not have a bigger model for those datasets with long input, so we tried to compare against approaches with similar base models. We truncated the output for the datasets with the longest inputs, which may reflect smaller values in our case. Since the advent of (Sun et al., 2020a), several current techniques are based on combining different datasets in the first phase through multitask learning and then fine-tuning each task in detail. Apart from (Sun et al., 2020a), this is the case for the prompt-base procedure from EFL (Wang et al., 2021b) as well. Our method focuses on obtaining the best results for a single task and dataset. Several datasets to pre-train the model could be used as a phase before all the others. However, we\ndoubt the possible advantages of this as the first and second phases would negatively affect this learning, and those techniques focused on training the classifier with several models would negatively affect the first two phases.\nTo complete the picture, CAE (Phuong et al., 2022) is an architecture method, which is also independent of the pre-training practice. A selfexplaining framework is proposed in (Sun et al., 2020b) as an architecture method that could be implemented on top of our approach."
        },
        {
            "heading": "5.1 Ablation study",
            "text": "We conducted ablation experiments on all the datasets, choosing the same hyper-parameters and base model as the best result for each one. The results can be seen in Table 4.\nWe start the table with the approaches mentioned: 3-Phaseand Joint. We wanted to see if combining the first two phases could produce better results as those would be learned simultaneously. The results show that merging the two losses always leads to worse results, except for one of the datasets where they give the same value.\nWe start the ablations by considering only DAE right before fine-tuning, denoting it as DAE+FT. In this case, we assume that the fine-tuning will carry all the class information. One advantage of this outlook is that it still applies to models that employ a small labelled fraction of all the data (i.e., the unlabelled data represents the majority). The next column, CL+FT, replaces DAE with Contrastive Learning, concentrating the attention on the classes and not the data distribution. Considering only the classes and fine-tuning in CL+FT, we get better results than in DAE+FT, but still lower than the 3-Phasein almost all the datasets. Right after, we add two extreme cases of the imbalance correction,\nwhere Extra Imb. increases the upper bound for the ratio and No Imb. excludes the imbalance method. Both cases generally produce lower accuracies than 3-Phase, being No Imb. slightly lower. The last column corresponds to fine-tuning FT.\nAll these experiments proved that the proposed 3-Phase approach outperformed all the steps independently, on its own, or combined the Denoising Autoencoder and the Contrastive Learning as one loss."
        },
        {
            "heading": "6 Conclusion",
            "text": "The work presented here shows the advantages of fine-tuning a model in different phases with an imbalance correction, where each stage considers certain aspects, either as an adaptation to the text characteristics, the class differentiation, the imbalance, or the classification itself. We have shown that the proposed method can be equally or more effective than other methods explicitly created for a particular task, even if we do not use auxiliary datasets. Moreover, in all cases, it outperforms classical fine-tuning, thus proving that classical fine-tuning only partially exploits the potential of the datasets. Squeezing out all the juice from the data requires adapting to the data distribution and grouping the vector representations according to the task before the fine-tuning, which in our case is targeted towards classification."
        },
        {
            "heading": "7 Future work",
            "text": "The contrastive training phase benefits of data augmentation, i.e., we can increase the number of examples simply through combinatorics. However, this can lead to space deformation for small datasets, even with the imbalance correction, as fewer points are considered. Therefore, overfitting\noccurs despite the combinatoric strategy. Another advantage of this phase is balancing the number of pairs with specific values. This practice allows us, for example, to increase the occurrence of the underrepresented class to make its cluster as well defined as those of the more represented categories (i.e. ones with more examples). This is a partial solution for the imbalance problem.\nIn the future, we want to address these problems. For the unbalanced class in the datasets, seek a solution to avoid overfitting to the under-represented classes and extend our work to support a few shot learning settings (FSL). To do so, we are going to analyze different data augmentation techniques. Among others, Variational Autoencoders. Recent approaches for text generation showed that hierarchical VAE models, such as stable diffusion models, may produce very accurate augmentation models. One way to investigate this is to convert the first phase into a VAE model, allowing us to generate more examples from underrepresented classes and generally employ them all in the FSL setting.\nFinally, we would like to combine our approach with other fine-tuning procedures, like prompt methods. Adding a prompt may help the model gain previous knowledge about the prompt structure instead of learning the prompt pattern simultaneously during the classification while fine-tuning.\nLimitations\nThis approach is hard to combine with other finetuning procedures, mainly those which combine different datasets and use the correlation between those datasets, since this one tries to extract and get as close as possible to the target dataset and task. The imbalance correction could be improved, restricting to cases where the text is short because it could be too noisy or choosing the tokens more elaborately and not just stop words. It would be necessary to do more experiments combined with other approaches, like the prompt base, to know if they benefit from each other or if they could have negative repercussions in the long term."
        },
        {
            "heading": "Acknowledgments",
            "text": "The authors would like to thank the members of the AIApps Research Group in the Huawei Ireland and London Research Centers for their valuable discussion and comments. We especially want to thank Milan Redzic, Tri Kurniawan Wijaya and Jinhua Du for their help."
        },
        {
            "heading": "A Appendix",
            "text": "A.1 Hyper-parameters This appendix section shows the final hyper-parameters from the best results in Table 3. The column at the end on the right contains the search space used for training. Some of the values were not used for training, either because of computational limitations or because they were not realistic for some datasets.\nA.2 Other metrics In this section of the appendix, we present the results obtained for metrics other than accuracy. More specifically, we present three tables: Precision and Recall in Table 6, and F1 (Table 7). These metrics show better the role played by the imbalance correction. The notation follows the Table 3."
        }
    ],
    "title": "Combining Denoising Autoencoders with Contrastive Learning to fine-tune Transformer Models",
    "year": 2023
}