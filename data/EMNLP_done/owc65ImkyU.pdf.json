{
    "abstractText": "As large language models (LLMs) have shown effectiveness with different prompting methods, such as Chain of Thought, Program of Thought, we find that these methods have formed a great complementarity to each other on math reasoning tasks. In this work, we propose XoT, an integrated problem solving framework by prompting LLMs with diverse reasoning thoughts. For each question, XoT always begins with selecting the most suitable method then executes each method iteratively. Within each iteration, XoT actively checks the validity of the generated answer and incorporates the feedback from external executors, allowing it to dynamically switch among different prompting methods. Through extensive experiments on 10 popular math reasoning datasets, we demonstrate the effectiveness of our proposed approach and thoroughly analyze the strengths of each module. Moreover, empirical results suggest that our framework is orthogonal to recent work that makes improvements on single reasoning methods and can further generalise to logical reasoning domain. By allowing method switching, XoT provides a fresh perspective on the collaborative integration of diverse reasoning thoughts in a unified framework.",
    "authors": [
        {
            "affiliations": [],
            "name": "Tengxiao Liu"
        },
        {
            "affiliations": [],
            "name": "Qipeng Guo"
        },
        {
            "affiliations": [],
            "name": "Yuqing Yang"
        },
        {
            "affiliations": [],
            "name": "Xiangkun Hu"
        },
        {
            "affiliations": [],
            "name": "Yue Zhang"
        },
        {
            "affiliations": [],
            "name": "Xipeng Qiu"
        },
        {
            "affiliations": [],
            "name": "Zheng Zhang"
        }
    ],
    "id": "SP:e320325a94925e61589dec5cbe64fec3f4f25e69",
    "references": [
        {
            "authors": [
                "Wenhu Chen",
                "Xueguang Ma",
                "Xinyi Wang",
                "William W. Cohen."
            ],
            "title": "Program of thoughts prompting: Disentangling computation from reasoning for numerical reasoning tasks",
            "venue": "CoRR, abs/2211.12588.",
            "year": 2022
        },
        {
            "authors": [
                "Xinyun Chen",
                "Maxwell Lin",
                "Nathanael Sch\u00e4rli",
                "Denny Zhou."
            ],
            "title": "Teaching large language models to self-debug",
            "venue": "CoRR, abs/2304.05128.",
            "year": 2023
        },
        {
            "authors": [
                "Meier-Hellstern",
                "Douglas Eck",
                "Jeff Dean",
                "Slav Petrov",
                "Noah Fiedel."
            ],
            "title": "Palm: Scaling language modeling with pathways",
            "venue": "CoRR, abs/2204.02311.",
            "year": 2022
        },
        {
            "authors": [
                "Karl Cobbe",
                "Vineet Kosaraju",
                "Mohammad Bavarian",
                "Jacob Hilton",
                "Reiichiro Nakano",
                "Christopher Hesse",
                "John Schulman."
            ],
            "title": "Training verifiers to solve math word problems",
            "venue": "CoRR, abs/2110.14168.",
            "year": 2021
        },
        {
            "authors": [
                "Edward A. Feigenbaum",
                "Julian Feldman"
            ],
            "title": "Computers and thought",
            "year": 1963
        },
        {
            "authors": [
                "Yao Fu",
                "Hao Peng",
                "Ashish Sabharwal",
                "Peter Clark",
                "Tushar Khot."
            ],
            "title": "Complexity-based prompting for multi-step reasoning",
            "venue": "CoRR, abs/2210.00720.",
            "year": 2022
        },
        {
            "authors": [
                "Luyu Gao",
                "Aman Madaan",
                "Shuyan Zhou",
                "Uri Alon",
                "Pengfei Liu",
                "Yiming Yang",
                "Jamie Callan",
                "Graham Neubig."
            ],
            "title": "PAL: program-aided language models",
            "venue": "CoRR, abs/2211.10435.",
            "year": 2022
        },
        {
            "authors": [
                "Tao Yu",
                "Rui Zhang",
                "Shafiq R. Joty",
                "Alexander R. Fabbri",
                "Wojciech Kryscinski",
                "Xi Victoria Lin",
                "Caiming Xiong",
                "Dragomir Radev."
            ],
            "title": "FOLIO: natural language reasoning with first-order logic",
            "venue": "CoRR, abs/2209.00840.",
            "year": 2022
        },
        {
            "authors": [
                "Joy He-Yueya",
                "Gabriel Poesia",
                "Rose E. Wang",
                "Noah D. Goodman."
            ],
            "title": "Solving math word problems by combining language models with symbolic solvers",
            "venue": "CoRR, abs/2304.09102.",
            "year": 2023
        },
        {
            "authors": [
                "Dan Hendrycks",
                "Collin Burns",
                "Saurav Kadavath",
                "Akul Arora",
                "Steven Basart",
                "Eric Tang",
                "Dawn Song",
                "Jacob Steinhardt."
            ],
            "title": "Measuring mathematical problem solving with the MATH dataset",
            "venue": "Proceedings of the Neural Information Processing Systems Track",
            "year": 2021
        },
        {
            "authors": [
                "Carl Hewitt."
            ],
            "title": "PLANNER: A language for proving theorems in robots",
            "venue": "Proceedings of the 1st International Joint Conference on Artificial Intelligence, Washington, DC, USA, May 7-9, 1969, pages 295\u2013302. William Kaufmann.",
            "year": 1969
        },
        {
            "authors": [
                "Mohammad Javad Hosseini",
                "Hannaneh Hajishirzi",
                "Oren Etzioni",
                "Nate Kushman."
            ],
            "title": "Learning to solve arithmetic word problems with verb categorization",
            "venue": "Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing, EMNLP",
            "year": 2014
        },
        {
            "authors": [
                "Shima Imani",
                "Liang Du",
                "Harsh Shrivastava."
            ],
            "title": "Mathprompter: Mathematical reasoning using large language models",
            "venue": "CoRR, abs/2303.05398.",
            "year": 2023
        },
        {
            "authors": [
                "Takeshi Kojima",
                "Shixiang Shane Gu",
                "Machel Reid",
                "Yutaka Matsuo",
                "Yusuke Iwasawa."
            ],
            "title": "Large language models are zero-shot reasoners",
            "venue": "NeurIPS.",
            "year": 2022
        },
        {
            "authors": [
                "Rik Koncel-Kedziorski",
                "Hannaneh Hajishirzi",
                "Ashish Sabharwal",
                "Oren Etzioni",
                "Siena Dumas Ang."
            ],
            "title": "Parsing algebraic word problems into equations",
            "venue": "Trans. Assoc. Comput. Linguistics, 3:585\u2013597.",
            "year": 2015
        },
        {
            "authors": [
                "Rik Koncel-Kedziorski",
                "Subhro Roy",
                "Aida Amini",
                "Nate Kushman",
                "Hannaneh Hajishirzi."
            ],
            "title": "MAWPS: A math word problem repository",
            "venue": "NAACL HLT 2016, The 2016 Conference of the North American Chapter of the Association for Computational Lin-",
            "year": 2016
        },
        {
            "authors": [
                "Hung Le",
                "Yue Wang",
                "Akhilesh Deepak Gotmare",
                "Silvio Savarese",
                "Steven Chu-Hong Hoi."
            ],
            "title": "Coderl: Mastering code generation through pretrained models and deep reinforcement learning",
            "venue": "NeurIPS.",
            "year": 2022
        },
        {
            "authors": [
                "Yifei Li",
                "Zeqi Lin",
                "Shizhuo Zhang",
                "Qiang Fu",
                "Bei Chen",
                "Jian-Guang Lou",
                "Weizhu Chen."
            ],
            "title": "On the advance of making language models better reasoners",
            "venue": "CoRR, abs/2206.02336.",
            "year": 2022
        },
        {
            "authors": [
                "Wang Ling",
                "Dani Yogatama",
                "Chris Dyer",
                "Phil Blunsom."
            ],
            "title": "Program induction by rationale generation: Learning to solve and explain algebraic word problems",
            "venue": "Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics,",
            "year": 2017
        },
        {
            "authors": [
                "Pan Lu",
                "Baolin Peng",
                "Hao Cheng",
                "Michel Galley",
                "KaiWei Chang",
                "Ying Nian Wu",
                "Song-Chun Zhu",
                "Jianfeng Gao."
            ],
            "title": "Chameleon: Plug-and-play compositional reasoning with large language models",
            "venue": "CoRR, abs/2304.09842.",
            "year": 2023
        },
        {
            "authors": [
                "Pan Lu",
                "Liang Qiu",
                "Wenhao Yu",
                "Sean Welleck",
                "Kai-Wei Chang."
            ],
            "title": "A survey of deep learning for mathematical reasoning",
            "venue": "CoRR, abs/2212.10535.",
            "year": 2022
        },
        {
            "authors": [
                "Clark."
            ],
            "title": "Self-refine: Iterative refinement with self-feedback",
            "venue": "CoRR, abs/2303.17651.",
            "year": 2023
        },
        {
            "authors": [
                "OpenAI."
            ],
            "title": "GPT-4 technical report",
            "venue": "CoRR, abs/2303.08774.",
            "year": 2023
        },
        {
            "authors": [
                "Arkil Patel",
                "Satwik Bhattamishra",
                "Navin Goyal"
            ],
            "title": "Are NLP models really able to solve simple math word problems",
            "venue": "In Proceedings of the 2021 Conference of the North American Chapter of the Association",
            "year": 2021
        },
        {
            "authors": [
                "Debjit Paul",
                "Mete Ismayilzada",
                "Maxime Peyrard",
                "Beatriz Borges",
                "Antoine Bosselut",
                "Robert West",
                "Boi Faltings."
            ],
            "title": "REFINER: reasoning feedback on intermediate representations",
            "venue": "CoRR, abs/2304.01904.",
            "year": 2023
        },
        {
            "authors": [
                "Jingyuan Qi",
                "Zhiyang Xu",
                "Ying Shen",
                "Minqian Liu",
                "Di Jin",
                "Qifan Wang",
                "Lifu Huang."
            ],
            "title": "The art of SOCRATIC QUESTIONING: zero-shot multimodal reasoning with recursive thinking and selfquestioning",
            "venue": "CoRR, abs/2305.14999.",
            "year": 2023
        },
        {
            "authors": [
                "Shuofei Qiao",
                "Yixin Ou",
                "Ningyu Zhang",
                "Xiang Chen",
                "Yunzhi Yao",
                "Shumin Deng",
                "Chuanqi Tan",
                "Fei Huang",
                "Huajun Chen."
            ],
            "title": "Reasoning with language model prompting: A survey",
            "venue": "CoRR, abs/2212.09597.",
            "year": 2022
        },
        {
            "authors": [
                "Subhro Roy",
                "Dan Roth."
            ],
            "title": "Solving general arithmetic word problems",
            "venue": "Proceedings of the 2015 Conference on Empirical Methods in Natural Language Processing, EMNLP 2015, Lisbon, Portugal, September 17-21, 2015, pages 1743\u20131752. The As-",
            "year": 2015
        },
        {
            "authors": [
                "Subhro Roy",
                "Tim Vieira",
                "Dan Roth."
            ],
            "title": "Reasoning about quantities in natural language",
            "venue": "Trans. Assoc. Comput. Linguistics, 3:1\u201313.",
            "year": 2015
        },
        {
            "authors": [
                "Noah Shinn",
                "Beck Labash",
                "Ashwin Gopinath."
            ],
            "title": "Reflexion: an autonomous agent with dynamic memory and self-reflection",
            "venue": "CoRR, abs/2303.11366.",
            "year": 2023
        },
        {
            "authors": [
                "driguez",
                "Robert Stojnic",
                "Sergey Edunov",
                "Thomas Scialom"
            ],
            "title": "2023b. Llama 2: Open foundation and fine-tuned chat models. CoRR, abs/2307.09288",
            "year": 2023
        },
        {
            "authors": [
                "Danqing Wang",
                "Lei Li."
            ],
            "title": "Learn from mistakes through cooperative interaction with study assistant",
            "venue": "CoRR, abs/2305.13829.",
            "year": 2023
        },
        {
            "authors": [
                "Xuezhi Wang",
                "Jason Wei",
                "Dale Schuurmans",
                "Quoc V. Le",
                "Ed H. Chi",
                "Denny Zhou."
            ],
            "title": "Selfconsistency improves chain of thought reasoning in language models",
            "venue": "CoRR, abs/2203.11171.",
            "year": 2022
        },
        {
            "authors": [
                "Yan Wang",
                "Xiaojiang Liu",
                "Shuming Shi."
            ],
            "title": "Deep neural solver for math word problems",
            "venue": "Proceedings of the 2017 Conference on Empirical Methods in Natural Language Processing, EMNLP 2017, Copenhagen, Denmark, September 9-11, 2017, pages",
            "year": 2017
        },
        {
            "authors": [
                "Jason Wei",
                "Xuezhi Wang",
                "Dale Schuurmans",
                "Maarten Bosma",
                "Brian Ichter",
                "Fei Xia",
                "Ed H. Chi",
                "Quoc V. Le",
                "Denny Zhou."
            ],
            "title": "Chain-of-thought prompting elicits reasoning in large language models",
            "venue": "NeurIPS.",
            "year": 2022
        },
        {
            "authors": [
                "Shunyu Yao",
                "Dian Yu",
                "Jeffrey Zhao",
                "Izhak Shafran",
                "Thomas L. Griffiths",
                "Yuan Cao",
                "Karthik Narasimhan."
            ],
            "title": "Tree of thoughts: Deliberate problem solving with large language models",
            "venue": "CoRR, abs/2305.10601.",
            "year": 2023
        },
        {
            "authors": [
                "Xu Zhao",
                "Yuxi Xie",
                "Kenji Kawaguchi",
                "Junxian He",
                "Qizhe Xie."
            ],
            "title": "Automatic model selection with large language models for reasoning",
            "venue": "CoRR, abs/2305.14333.",
            "year": 2023
        }
    ],
    "sections": [
        {
            "heading": "1 Introduction",
            "text": "The AI community has long sought to achieve automated reasoning (Hewitt, 1969), which is an important component of Artificial General Intelligence (Steunebrink et al., 2016). Mathematical reasoning, as a cognitive skill essential for humans yet challenging for language models, attracts increasing interests and commitment from researchers (Feigenbaum and Feldman, 1963; Wang et al., 2017; Lu et al., 2022).\nWith the abilities endowed by in-context learning (ICL), Large Language Models (LLMs)\n\u2217Work done during internship at AWS Shanghai AI Lab. \u2020Corresponding authors.\n(Brown et al., 2020; Chowdhery et al., 2022; Touvron et al., 2023a; OpenAI, 2023) are able to solve mathematical problems through textual rationales with Chain-of-Thought prompting (Wei et al., 2022) (CoT) or through Python functions with Program-Aided Language Model (Gao et al., 2022) and Program-of-Thought prompting (Chen et al., 2022) (PAL or PoT). These prompting methods exhibit unique strengths and limitations. CoT generates a step-by-step reasoning flow in natural language and performs calculations on the fly. This approach enables a more flexible solution format, but may result in a loss of precision since language models often struggle with arithmetic calculations (Lewkowycz et al., 2022; Wei et al., 2022). On the other hand, PoT or PAL resolves problems through Python statements, relying on Python interpreters to ensure calculation accuracy. Another noteworthy and intriguing prompting method is to form math problems as linear equation systems (He-Yueya et al., 2023). Similarly, inspired by Linear Algebra, we propose Equation-of-Thought (EoT), which performs math reasoning in a more direct way.\nThe diversity inherent in each method does not\nrender them as competing or mutually exclusive alternatives. On the contrary, in practical problem solving scenarios, possessing multiple methods can always yield a range of complementary advantages. The distinct problem-solving approaches can contribute to synergistic benefits that surpass the outcomes of any single approach. We find that this intuition also applies to the realm of math reasoning. With the availability of CoT, PoT and EoT, we hold the hypothesis that a model has the potential to solve a problem if it reaches the correct answer using any one of the prompting methods. As illustrated in Figure 2, our analysis shows that the model exhibits the potential to solve 92.72% of the problems, surpassing the best performing single method by over 10%.\nMotivated by this observation, we propose XoT, an integrated math problem solving framework, which improves the LLM\u2019s reasoning ability by switching among diverse reasoning thoughts. Since there is no guarantee that LLMs can always solve the problem in a single attempt, we follow the human intuition and allow the model to rethink and switch to a different method when encountering difficulties or obstacles. We apply two complementary verification methods to facilitate the model to decide whether it is time to switch to another method: passive and active verification. Passive verification relies on the external executors to provide determinable results based on the generated programs (Chen et al., 2023; Le et al., 2022). It offers shallow inspections, such as program syntax issues or the runtime errors. For active verification, we ask the model to verify the solution by checking whether the answer adheres to the conditions outlined in the original question.\nAs shown in Figure 1, XoT consists of three modules that work in an iterative framework: planning, reasoning and verification. Given a problem as input, the planning module first proposes the most appropriate method. The reasoning module then generates one solution using the planned prompting method. With the outputs and the results from external executors, the model is asked to assess the answers in the context of the questions. If the answer fails the verification, we will go back to the planning module for another round of iteration and attempt alternative methods. The iterative process concludes when the verification confirms the correctness of the answer or after exhausting all available methods.\nTo demonstrate the effectiveness of XoT, we conduct extensive experiments on 10 popular mathematical reasoning datasets and achieve consistent improvement. Empirical results suggest that XoT can accommodate recent work that focuses on improving single reasoning methods. Additional experiments also indicate that XoT can generalise to other domains such as logical reasoning tasks.\nWe summarize the main contributions as follows. First, we propose an integrated problem solving framework XoT, utilising the complementarity of different reasoning thoughts. Second, we introduce EoT which solves math problems with a system of linear equations, serving as a complementary method to existing approaches. Third, we incorporate passive and active verification to facilitate the framework to switch among diverse reasoning thoughts, empowering the framework to make informed decisions regarding the subsequent steps to be taken. More generally, XoT sheds lights on a new direction of interacting with diverse reasoning methods and tools. As shown in Figure 1, instead of sticking to one determined method, LLMs can benefit from the verification and the flexible switching among available reasoning thoughts. 1"
        },
        {
            "heading": "2 Related Work",
            "text": ""
        },
        {
            "heading": "2.1 Math Reasoning with LLMs",
            "text": "As the field of large language models continues to prosper, many prompting techniques have emerged\n1Code is publicly available at: https://github.com/ tengxiaoliu/XoT.\nto unlock the reasoning abilities of LLMs (Qiao et al., 2022). Early success includes reasoning with step-by-step chain of thought (Wei et al., 2022), decomposing questions into sub-questions in a least-to-most fashion (Zhou et al., 2022), zero-shot prompting LLMs with simply one sentence (Kojima et al., 2022), writing programs to solve procedural tasks (Gao et al., 2022; Chen et al., 2022). Despite generating solutions in single forward pass, one line of work employs multiple reasoning results and ensembles them by majority vote (Wang et al., 2022), and stepwise verifier (Li et al., 2022). Additionally, Tree-of-Thoughts (Yao et al., 2023) deliberately explores multiple reasoning paths and searches over a tree-structured reasoning states. Imani et al. (2023) propose to vote over multiple solutions generated with algebraic and program prompts. One concurrent work (Zhao et al., 2023) considers the difference of CoT and PoT and asks the LLM to choose one better reasoning rationale. In contrast to their work, XoT involves more reliable verification modules and switches methods when necessary."
        },
        {
            "heading": "2.2 Iterative Refinement",
            "text": "One stream of work is dedicated to iteratively enhancing LLMs by continuously reevaluating and refining outputs until the desired quality is achieved. Madaan et al. (2023) prompts the model to write feedback based on previously generated drafts and leverages the feedback to generate high-quality outputs. Similarly, Chen et al. (2023) iteratively debugs the code by utilizing external program execution results and code explanations generated by the model itself. In order to avoid repetitive mistakes, Shinn et al. (2023) builds a memory of previous errors, while Wang and Li (2023) collects all mistakes during the training phase to provide a global insight. When considering sources of hints to guide rethinking, Paul et al. (2023) focuses on intermediate reasoning steps, while Zheng et al. (2023) directly utilizes the previously generated answers. Qi et al. (2023) propose to emulate the divideand-conquer fashion of human thinking strategy and involve self-questioning and recursive thinking processes in the problem solving framework. Although these approaches contribute to improving the reasoning quality of LLMs, they are limited in retrying without looking around for other possible thoughts. In contrast, our proposed method aims to explore alternative solutions, and it is orthogonal\nto iterative refinement, as we have the flexibility to switch solutions when refining no longer leads to further improvement."
        },
        {
            "heading": "3 Preliminary",
            "text": ""
        },
        {
            "heading": "3.1 Prompting methods",
            "text": "For math reasoning tasks, we use three reasoning thoughts in this work, namely Chain-ofThought (CoT), Program-of-Thought (PoT) and Equation-of-Thought (EoT). Despite the wellknown strengths of CoT and PoT methods, our proposed EoT excels particularly in reasoning with unknown variables. For each problem, EoT attempts to model the questions as linear equations and involves unknown values in the description. A detailed formulation of EoT prompting can be found in Table 12 of Appendix C. As illustrated in Figure 3, while CoT correctly sets up the equations, it fails in accurately performing the calculations. PoT falls short in dealing with unknown variables, as Python requires that every variable is defined with a value. Assigning a value to an unknown variable (david_insects) hallucinates PoT to generate a misleading step (the highlighted line). In comparison, EoT manages to express the question context in straightforward equations and solves them with a deterministic equation solver."
        },
        {
            "heading": "3.2 Complementarity",
            "text": "Given a question q, we denote the correctness of the reasoning answers using each method as R\u0302X(q), where X \u2208 {CoT, PoT,EoT} denotes the diverse reasoning methods. R\u0302X(q) = {0, 1} represents whether the generated answer is correct according to the gold label. We define the accuracy under the oracle setting as: ACCoracle = \u2211 q R\u0302CoT (q)\u2228R\u0302PoT (q)\u2228R\u0302EoT (q).\n(1) The oracle setting represents that the model has the potential for solving one given problem if any of the methods accurately generates the answer. It also implies that in cases where the generated answer does not match the gold answers, XoT will make further attempts using alternative methods to answer the question. Under oracle setting, the model can potentially achieve more than 10% gains on various datasets. In Figure 2, the bar at the bottom represents the highest performance achieved by employing a single method, followed by the optimal performance achieved through the use of two methods. The overall stacked bar shows the utilization of all three methods, which indicates the upper bound that can be reached through the combined collaboration of various methods."
        },
        {
            "heading": "4 XoT",
            "text": "Our goal is to develop a generalized problem solving framework that can automatically select the appropriate method for different problems and has the capability to switch among reasoning thoughts using both active and passive verification. We first describe the overall framework and introduce each module in detail."
        },
        {
            "heading": "4.1 Overall Framework",
            "text": "The overall pipeline is described in Algorithm 1. The inputs of our framework include a question q and a predefined set of methods M . With the user input, XoT employs its three built-in modules to output the final solution, namely planning module P , reasoning module R and verification module V .\nThese three modules collaborate in an iterative manner. Suppose at iteration t, the planning module P first chooses the most appropriate method available: mt = P (M). The chosen method is subsequently excluded from the set of methods. The reasoning module is then tasked to generate\nAlgorithm 1 XoT Reasoning Algorithm Require: input question q, method set M , plan-\nning module P , reasoning module R, verification module V 1: t\u2190 0 2: while |M | > 0 do 3: mt \u2190 P (M) \u25b7 Choose method 4: M \u2190M \\ {mt} 5: y \u2190 Rmt(q) 6: if V (y) then 7: break \u25b7 Verification passed 8: else 9: t\u2190 t+ 1 \u25b7 Continue next iteration 10: end if 11: end while 12: return y \u25b7 Return the solution\none solution y using the proposed method mt. Following this, the verification module evaluates the solution by rethinking the answer within the given conditions. If the answer successfully passes the verification, we proceed to return the current solution. Otherwise, XoT will move forward to the next iteration. Every module is implemented with a LLM through inference under few-shot setting. We will elaborate each module with details."
        },
        {
            "heading": "4.2 Planning and Reasoning",
            "text": "The planning module is responsible for selecting the appropriate method at the beginning of each round of iteration. Recent work shows the necessity to equip reasoning framework with the ability to plan ahead (Lu et al., 2023). As elaborated in Section 3, it is evident that each method possesses distinct strengths. Our intuition is to consistently initiate the process with the optimal method to enhance reasoning efficiency.\nThe reasoning module performs few-shot reasoning with the planned prompting method. Each round of reasoning operates independently, meaning that subsequent iterations do not rely on the failed reasoning attempts of previous iterations."
        },
        {
            "heading": "4.3 Verification module",
            "text": "The verification module assesses the effectiveness of the reasoning solution through two approaches: passive verification and active verification.\nWhen solutions involve offloading computation to external tools, the execution results naturally serve as a passive verification. Any occurrence of errors or exceptions during the execution directly\nresults in a failure in the verification process. Solutions that pass the passive verification stage then proceed to active verification.\nIn the case of active verification, the module rethinks the answer within the context of the given question. It first acquires all intermediate values associated with each variable mentioned in the solution. These values are computed by external executors. We intentionally exclude the reasoning process (expressions) leading to the results to prevent the verification module from emulating the solution\u2019s thinking process. With the intermediate results and final answer in hand, the module is expected to recheck whether the answer satisfies the conditions specified in the question. The desired\nformat for this evaluation is an assertion statement, as shown in Figure 4. This assertion is subsequently combined with the original solution for external tools to execute. If no issues arise during this execution phase, it means the solution successfully passes the verification. A detailed illustration of the prompts we use can be found in Appendix C. The verification module is specially designed for PoT and EoT as the intermediate values can be easily obtained. We leave the exploration of a more effective verification for CoT as future work."
        },
        {
            "heading": "5 Experiments",
            "text": ""
        },
        {
            "heading": "5.1 Experimental Setting",
            "text": "Datasets Our experiments are conducted on a comprehensive set of 10 math reasoning datasets, encompassing various challenging math reasoning scenarios. Some widely used datasets include GSM8K, SVAMP, AQuA, MATH and MAWPS (AddSub, SingleOP, SingleEQ, MultiArith) (Koncel-Kedziorski et al., 2016). Besides, we also incorporate several recently introduced datasets, namely Algebra, GSM-hard. Algebra comprises a collection of solely algebraic word problems that can be resolved through the use of equations. To increase the complexity of calculations, GSM-hard replaced small numerical values with larger ones. The details of the statistics of the datasets can be found in Table 1.\nModel We query OpenAI API for experiments2. Specifically we use gpt-3.5-turbo as the inference engine. If not further explained, we manually construct the prompts with 8 examples sampled from the training set. For CoT and PoT, we directly use the examples released by published paper (Fu et al., 2022; Gao et al., 2022; Chen et al., 2022). For model generation strategy, we employ greedy decoding in all runs. Due to the non-deterministic APIs, we report the average performance and the standard deviation across 3 runs. We also evaluate XoT with various base models in Appendix A.2."
        },
        {
            "heading": "5.2 Main Results",
            "text": "The main results are shown in Table 2. We consider three prompting methods as baselines, namely CoT, PoT and EoT. On average, XoT achieves a significant improvement of 5.49% across the datasets. For MATH dataset, we show the breakdown results of different question subtopics in Table 3. We also represent the performance enhancement over the strongest baseline as \u2206. As questions in MATH are too complex for equation systems to solve, we only consider CoT and PoT with passive verification. Specifically, on the AQuA dataset, which consists of multiple-choice questions, we observe that PoT or EoT often fails to generate a valid answer due to the diverse answer formats. Across the three runs, 24.4% of the PoT answers and 30.3% of the EoT answers cannot be executed. Therefore, applying passive verification is adequate to ensure the explortion of other method options. When post processing the generated results, we further enforce a restriction that the model cannot make a random guess if it fails to extract an answer from the generated output. Such instances should be proceeded to the next iteration to guarantee a fair evaluation of the performance.\nNotably, we observe that the enhancements are more pronounced for the challenging datasets compared to the easier ones. Difficult datasets usually contain longer questions and more than 3 reasoning steps while easier datasets such as SingleEQ require only one equation to solve the problem. We find that the improvement directly correlates with the complementary nature of the three methods employed across different datasets. On easier datasets, each method performs well individually, resulting in only minor complementarity. Figure 5 reveals that XoT demonstrates superior performance on\n2https://openai.com\ndatasets that exhibit stronger enhancement under oracle setting. The bars in the figure represent the improvement under XoT, while the line indicates the upper bound of the improvement under oracle setting. The comparison indicates that MultiArith and SingleEQ allow minimal room for improvement, therefore the overall XoT performance is negatively impacted by the accumulated errors introduced by the verification module.\nAdditionally, we conduct experiments on logical reasoning task to evaluate the generalisability of XoT. Details can be found in Appendix A.1."
        },
        {
            "heading": "6 Analysis",
            "text": "In this section, we first analyze the effectiveness and necessity of each module within XoT. Then we provide comparison with majority voting and describe how model\u2019s self refinement can be integrated in our framework."
        },
        {
            "heading": "6.1 Ablation Study",
            "text": "Planning The planning module decides which method to attempt at the beginning of each iteration. We are curious about how well it performs in selecting the most suitable method among the available options. The planning module is expected to select from PoT and EoT at the beginning because these two methods can be verified with both active and passive verification. To demonstrate the necessity of the planning module, we conduct an experiment in which XoT is asked to execute each method in a predefined order. Whether to switch the method is still determined by the verification module. We break down the performance of each dataset with respect to different combinations of methods in Table 4.\nOur findings align with two design ethos of the planning module. First, it demonstrates robustness across different datasets. While specific combinations excel at different datasets, XoT equipped with the planning module outperforms all other predetermined combinations on average. For instance, on GSM-hard, the combination of PoT and EoT achieves the best performance, which highlights the importance of leveraging external tools to handle calculation involving large numbers. Additionally, on SingleEQ and MultiArith where XoT fails to offer improvement, the combination of two methods proves to be efficient, surpassing the single method baselines. With the inclusion of the planning module, XoT can dynamically adjust the\n12\n16\n20\n24\nexecution order based on different questions, which ensures a more consistent and robust performance.\nSecond, the planning module enhances efficiency, facilitating XoT to reach the final answer in fewer iterations by always starting from the most possible method. To illustrate, on GSM8K, XoT needs 1.46 iterations on average in comparison with 1.58 iterations with the fixed EPC order (EoT->PoT>CoT, the best performing fixed order). Specifically, 68.8% of the questions are resolved in the first iteration with XoT, as opposed to 57.2% when employing the fixed EPC order.\nReasoning How important is it to try different methods instead of exclusively relying on a single method? To investigate this, we restrict the available method options to utilizing PoT only, denoted\nas PoT3. In other words, if the generated solution fails to pass the verification, it reconsiders its reasoning using the same prompting method instead of changing to another. The results are demonstrated in Figure 6. PoT3 uses the same few-shot examples in three iterations while PoT3-d uses differente examples randomly sampled from the training set. It is observed that under orcale setting, repetitive exploitation of a single method has limited complementarity of 84.08%, which is 8.64% less than XoT. As a result, the final performance reflects such a gap with PoT3 of 78.39% and XoT of 82.71%.\nThis suggests the necessity of employing various reasoning methods in our framework.\nVerification The verification module facilitates seamless switching between iterations. We here explore how helpful the active and passive verifications are. Figure 7 illustrates the performance comparison when considering different verification aspects. If we solely depend on passive verification, only 2.43% of the PoT results and 24.18% of the EoT results are deemed \u201cincorrect\u201d and subsequently advanced to the next iteration. However,\nsuch a simplistic verification approach yields an alarmingly high false positive rate of 89.5% and 41.0%, as shown in Table 5. This drawback is particularly critical as our XoT\u2019s essence lies in the ability to adaptively switch methods, and a high false positive rate restricts the model\u2019s ability to explore alternative method options. By additionally incorporating active verification, despite a slight compromise in accuracy, the false positive rate is substantially reduced by 56.8% and 24.3%. We also note that this approach inevitably leads to an increase in the false negative rate. However, this is a minor drawback as the subsequent method options still have chances to get it correct. Consequently, employing active verification offers 2.3% gains to the overall XoT performance.\nAdditionally, we explore the necessity of the iterative nature of XoT by removing the entire verification module. In this scenario, we only reason once with the most suitable method suggested by the planning module. The results are presented in Table 6. As our planning module mainly chooses the method from PoT or EoT, we here restrict the available methods to PoT and EoT only in XoT framework, which is denoted as \u2018XoT (only PE)\u2019. By removing the verification module, the framework, denoted by \u2018XoT (w/o verification)\u2019 is no more capable of rechecking the answer thus cannot\nperform iterative attempts to switch methods. This leads to a performance degradation of 4.9% and 2.9% on GSM8K and SVAMP respectively."
        },
        {
            "heading": "6.2 Comparison with Majority Voting",
            "text": "We additionally conduct experiments involving the majority vote of three distinct methods. The vote is based on three answers generated by three methods (one answer per method). As shown in Table 7, taking the majority vote of the three methods achieves 82.59 on average, while XoT achieves better performance at 84.63. Additionally, we observe that the majority vote fails on datasets containing questions that align exceptionally well with a specific method. Specifically, the majority vote achieves 79.73 on Algebra, while XoT achieves 89.94.\nThe majority vote needs to execute all three methods to reach an answer, while XoT will stop when the answer passes the verification. We calculate the total token count as #total_token = #input_token+#output_token \u2217 2, according to OpenAI\u2019s pricing policy3. As shown from the table, XoT is able to achieve higher performance with a lower budget, exhibiting a reduction of 16.7% in expenses. The token count includes all the incontext examples used and is averaged across the number of the total questions in 9 datasets."
        },
        {
            "heading": "6.3 Self-refinement",
            "text": "The design principle underlying XoT is its adaptable capability to switch methods, allowing for smooth integration with research aimed at improving individual methods. The line of iterative refinement methods enhances the model performance\n3https://openai.com/pricing\nby asking the model to rethink on its previous response, serving as a good alternative for the reasoning module in XoT. Specifically, before moving on to another method at each iteration, we allow the model to first make self refinement on its current approach, making the best use of current method.\nInspired by previous work (Madaan et al., 2023), after reasoning with one method for the first time, we require the model to analyze its response lineby-line and summarize several advice to mitigate the potential errors. Then, the model answers the question for a second time in the same method, with the summarized advice as a hint. After that, we verify the results produced by the second round and determine whether to switch to another method.\nTo achieve the iterative refinement in CoT, we follow Zheng et al. (2023) to progressively hint the model with the answers generated before. For PoT and EoT, we follow the released self-refinement prompts from Madaan et al. (2023). The results are shown in Table 8. We only allow the model to think twice using each prompting method. Though adding only one round of refinement yields marginal improvement within each single method, their collaboration contributes to a more significant improvement under XoT framework."
        },
        {
            "heading": "7 Conclusion",
            "text": "We propose XoT, an integrated problem solving framework that utilizes diverse reasoning thoughts to prompt LLMs. XoT integrates planning, reasoning and verification into a unified framework, enabling the model to explore multiple methods based on the active and passive verification of the solutions. We conduct extensive experiments on 10 math reasoning datasets to thoroughly evaluate the advantages of each module and showcase the efficacy of our proposed approach. Further results also show that the design ethos of XoT can generalize to logic reasoning domain. We consider its generalisation to more diverse tasks as a compelling avenue for future exploration.\nLimitations\nWe acknowledge that our approach falls short on easier and more straightforward datasets where different methods exhibit limited complementary relations. Our current approach relies on the availability of diverse prompting methods for reasoning tasks. Further research is required to explore new problem solving methods for general reasoning tasks. Moreover, we observe that our method works better on larger base models. Although different reasoning methods do exhibit notable complementarity on smaller models, the inherent potential is not yet fully unleashed in current XoT design.\nEthics Statement\nThe data used in our work all comes from public dataset, and our proposed method can be further integrated with other methods. Our work is conformant to ACL Ethics Policy."
        },
        {
            "heading": "Acknowledgements",
            "text": "We would like to thank the anonymous reviewers for their valuable suggestions and feedback. This work was supported by the National Natural Science Foundation of China (No. 62236004 and No. 62022027)."
        },
        {
            "heading": "A Further Analysis",
            "text": "A.1 Generalisation to logical domain We analyze the generalisability of XoT framework to logical reasoning domain. One recent work (Yao et al., 2023) proposed LogicLM to solve logical reasoning questions using First Order Logic expressions and executed them in external symbolic reasoners. Following LogicLM, we design similar formal language expressions to represent First Order Logic and conduct experiments on FOLIO (Han et al., 2022), an expert-written, logically complex and diverse dataset for natural language reasoning. Our findings in Table 9 suggest that different methods in logical domain also show strong complementarity, achieving 77.45% under oracle setting. After involving the verification module, XoT performs at 62.75% on the validation set of FOLIO. These results underscore the applicability of XoT as a general problem solving framework.\nA.2 Experiments on other models We further assess the performance of XoT across various base models, such as Llama-2 series (Touvron et al., 2023b). The results are shown in Table 10, and we illustrate the performance scaling curve in Figure 8. With less capable models, different prompting methods still demonstrate strong complementarity under oracle setting. Our observations suggest that smaller models tend to yield suboptimal results, likely due to the unbalanced performance across different reasoning approaches\nand the models\u2019 limited capability for active verification. This limitation inhibits the model\u2019s ability to timely switch between methods. However, as the model\u2019s size increases, XoT consistently shows its strength across the datasets.\nA.3 Proportion of XoT Figure 9 illustrates the proportion of different methods that XoT selects as the final answers. On GSM8K, 56.7% questions end up being solved with PoT, while 28.3% are tackled by EoT. The remaining 15% is left for CoT to solve.\nB XoT with self refinement\nWe here offer the details of how we combine iterative self-refinement with XoT framework. As shown in Figure 10, the self refinement process can be integrated in the reasoning module, where the dashed line indicates rethinking using the same method. When the desired number of self refinement iterations is reached, the generated solutions will proceed to the verification module. Then the\nverification will determine whether to use the current solution or change to another method."
        },
        {
            "heading": "C Examples",
            "text": "In this section, we show the input and output examples of each module in XoT. Full prompts are available in public Github repository: https: //github.com/tengxiaoliu/XoT. For EoT, we use sympy 4 library to solve the linear equations.\n4https://www.sympy.org/"
        }
    ],
    "title": "Plan, Verify and Switch: Integrated Reasoning with Diverse X-of-Thoughts",
    "year": 2023
}